{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/matery/source/favicon-1.png","path":"favicon-1.png","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/contact.jpg","path":"medias/contact.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo-1.png","path":"medias/logo-1.png","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","path":"libs/codeBlock/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ajin.jpg","path":"medias/avatars/ajin.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","path":"medias/avatars/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/babyq.png","path":"medias/avatars/babyq.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","path":"medias/avatars/cww97.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/feibar.jpg","path":"medias/avatars/feibar.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/fun4go.png","path":"medias/avatars/fun4go.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hael.jpg","path":"medias/avatars/hael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","path":"medias/avatars/huaji.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","path":"medias/avatars/hzwer.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","path":"medias/avatars/ids2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","path":"medias/avatars/ldy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","path":"medias/avatars/kewlgrl.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","path":"medias/avatars/liyangzone.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","path":"medias/avatars/liyucheng.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/masterx.jpg","path":"medias/avatars/masterx.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/michael.jpg","path":"medias/avatars/michael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","path":"medias/avatars/mouse.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mpy634.png","path":"medias/avatars/mpy634.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","path":"medias/avatars/qiqiang.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/spacesac.png","path":"medias/avatars/spacesac.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taotao.jpg","path":"medias/avatars/taotao.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","path":"medias/avatars/taowei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","path":"medias/avatars/sunchangzhi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/tawn.jpg","path":"medias/avatars/tawn.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/yezijie.png","path":"medias/avatars/yezijie.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","path":"medias/avatars/zhaokangzhe.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","path":"medias/avatars/antnlp.ico","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","path":"medias/avatars/duyupei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","path":"medias/avatars/gsy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jiejie.jpg","path":"medias/avatars/jiejie.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","path":"medias/avatars/lijiaqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","path":"medias/avatars/mizunashi.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","path":"medias/avatars/milyyy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","path":"medias/avatars/qiandongwei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","path":"medias/avatars/myzhihu.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xiejiadong.jpg","path":"medias/avatars/xiejiadong.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","path":"medias/avatars/xuzhongyou.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","path":"medias/avatars/zhangting.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","path":"medias/avatars/zzw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","path":"medias/avatars/lyn-draw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qianqian.png","path":"medias/avatars/qianqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","path":"medias/music/avatars/tiantangdemogui.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","path":"medias/music/avatars/yequ.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","path":"medias/music/avatars/yiluxiangbei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/0xbird.png","path":"medias/avatars/0xbird.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lzh.png","path":"medias/avatars/lzh.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","path":"medias/avatars/mashiro.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/28.jpg","path":"medias/featureimages/28.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","path":"medias/avatars/jitao.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/27.jpg","path":"medias/featureimages/27.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","path":"medias/music/avatars/daoshu.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/feibar.png","path":"medias/avatars/feibar.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","path":"medias/avatars/jingjing.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","path":"medias/avatars/zhangyi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/26.jpg","path":"medias/featureimages/26.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"d97f69ff63501de89cfd341c68e4d6ed5c8a5b3a","modified":1586054623000},{"_id":"source/CNAME","hash":"a272f86b2a87102f8735a8369199dafb0edfc33e","modified":1606791587366},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1586054623000},{"_id":"themes/matery/_config.yml","hash":"b1025fb4d6f55e5ba835380f346982c17e8485d4","modified":1606999781574},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1586054623000},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1586054623000},{"_id":"themes/matery/README_CN.md","hash":"a94324950e0299bcfcbc106cf2ca65c93e1fe843","modified":1586054623000},{"_id":"source/_posts/pip-change-source.md","hash":"dce77b0c1918a6cd5d31a7d46523365682e08e6c","modified":1606998846311},{"_id":"source/_posts/Raspberry-Pi-camera.md","hash":"b058f004d51f6b8c5347e6916565e3399db9ad7f","modified":1606981629065},{"_id":"source/_data/friends.json","hash":"6f330c0cdbfbe4e50a45527413c798defcef80d1","modified":1586054623000},{"_id":"source/_data/musics.json","hash":"32bc061f34721b4ff55f880de1d0ec5787acd2f9","modified":1586054623000},{"_id":"source/_posts/sort-algorithms.md","hash":"7d1b6f7db08898569f0ac59649b05d34961be815","modified":1606787853244},{"_id":"source/archives/index.md","hash":"30a0e3a59be650ae34d7bb86ac7da53e21e9cf5b","modified":1586054623000},{"_id":"source/categories/index.md","hash":"67687d3f908737f7c680f096b3e80d9412f23b0e","modified":1586054623000},{"_id":"source/_posts/基于混沌Logistic加密算法的图片加密与还原.md","hash":"9d519537f730f46f61e7ded95bcd97cea3ed4f96","modified":1606807143747},{"_id":"source/friends/index.md","hash":"2eb18fce9c356f2b43cb2651fe5836806ada72ac","modified":1606790995883},{"_id":"source/tags/index.md","hash":"fe3d7ecc91b81b062a6a60c06859dc24b9d704ac","modified":1586054623000},{"_id":"source/about/index.md","hash":"e3e2502c35fc1093dc2f2f8575826c7905691a47","modified":1606790638708},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1586054623000},{"_id":"source/contact/index.md","hash":"f3fd3e639a7387726ca76cc33af0026e46de71fb","modified":1606790959620},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1586054623000},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1586054623000},{"_id":"source/_posts/Dimensionless-processing-of-data.md","hash":"3716746732a651ed38e6d923a15e5128f9307353","modified":1606807107486},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1586054623000},{"_id":"themes/matery/layout/category.ejs","hash":"2d421e10c3b8fd2c4f725e5eaa967c4a1429c707","modified":1586054623000},{"_id":"themes/matery/layout/layout.ejs","hash":"2ba4110dc596424b1220a259c8e594da774e7f59","modified":1586054623000},{"_id":"themes/matery/layout/post.ejs","hash":"f1a35f32e5901e167ae9a750e7cb3635549cea2e","modified":1586054623000},{"_id":"themes/matery/layout/tag.ejs","hash":"5cdf3a1d72f54285ee9cb826fd0e4a0449093215","modified":1586054623000},{"_id":"themes/matery/languages/default.yml","hash":"527c795b8c41fe62bf35603ffebfa6d4a7929a2c","modified":1586054623000},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1586054623000},{"_id":"themes/matery/languages/zh-CN.yml","hash":"d92db4b986bb6f0d228e9a8249383103bf56342d","modified":1586054623000},{"_id":"themes/matery/layout/archive.ejs","hash":"1b5023571894404d75caffa28128fc9c49f9095d","modified":1586054623000},{"_id":"themes/matery/layout/friends.ejs","hash":"895e40a864796680fbef581e4b09f252fbdd963a","modified":1586054623000},{"_id":"themes/matery/layout/index.ejs","hash":"7fc5a6c4f0229c0be43b7d1315524c468346fbb8","modified":1586054623000},{"_id":"themes/matery/source/favicon-1.png","hash":"0f4145b9a712f9662e4fae1b0086ce74cf1f9fc4","modified":1586054623000},{"_id":"source/_posts/Dimensionless-processing-of-data/10.png","hash":"9bc78416b24f0428aa5ca26e657c37424d60a828","modified":1606804608935},{"_id":"source/_posts/Dimensionless-processing-of-data/11.png","hash":"e651502cf0f13a5690bfd55928d12732ff6fbd5e","modified":1606804621653},{"_id":"source/_posts/Dimensionless-processing-of-data/12.png","hash":"c1082b99f7080c7af317cfb142447a0608a6fd8b","modified":1606804634810},{"_id":"source/_posts/Dimensionless-processing-of-data/14.png","hash":"201f89690b94391bc32610c99d5ef2c3a38776d8","modified":1606804661768},{"_id":"source/_posts/Dimensionless-processing-of-data/13.png","hash":"682d548c43aef83806eabd09d4cbd3cccba364f2","modified":1606804649479},{"_id":"source/_posts/Dimensionless-processing-of-data/1.png","hash":"99ccc7724643508fcf67caed0a3733072625f05a","modified":1606804387689},{"_id":"source/_posts/Dimensionless-processing-of-data/15.png","hash":"7bbef6b9baa145cf425a022dd0abfbb5fe85347d","modified":1606804675065},{"_id":"source/_posts/Dimensionless-processing-of-data/18.png","hash":"9981c508409438839db94d5da7eeed564758b873","modified":1606804719789},{"_id":"source/_posts/Dimensionless-processing-of-data/16.png","hash":"856cc6601bbf58c25000efb59cd027e830032a51","modified":1606804690445},{"_id":"source/_posts/Dimensionless-processing-of-data/17.png","hash":"a7d4991d6956f30245315e26f96faeb30d58fe96","modified":1606804705550},{"_id":"source/_posts/Dimensionless-processing-of-data/21.png","hash":"7577a2ad832b9a4d518528e2a133a6503ae542c4","modified":1606804759451},{"_id":"source/_posts/Dimensionless-processing-of-data/3.png","hash":"993e01feedbce5f6361ae84778e6aac8e7e22a48","modified":1606804415274},{"_id":"source/_posts/Dimensionless-processing-of-data/22.png","hash":"1485a8dadab3f4d455d6bb4f24649ec0b382f8b0","modified":1606804776768},{"_id":"source/_posts/Dimensionless-processing-of-data/4.png","hash":"9d5b322556af662a8d6efff3aacbc73957cc4d06","modified":1606804432292},{"_id":"source/_posts/Dimensionless-processing-of-data/5.png","hash":"e8e68122730736047a2d80c88e001c9a91e649c7","modified":1606804494575},{"_id":"source/_posts/Dimensionless-processing-of-data/6.png","hash":"8fcf27710492c1e57cddf75f13321af184668438","modified":1606804558438},{"_id":"source/_posts/Dimensionless-processing-of-data/2.png","hash":"97b76fc43e1f78f1a14cdba90dcfdd732693297c","modified":1606804401231},{"_id":"source/_posts/Dimensionless-processing-of-data/8.png","hash":"fa5a91bb8a660e127d1d4d6968e3bd4bc08c8cbc","modified":1606804582715},{"_id":"source/_posts/Dimensionless-processing-of-data/9.png","hash":"a021432545bf9f623633c36e3c0056b62ec567b5","modified":1606804594852},{"_id":"source/_posts/pip-change-source/1.png","hash":"2f6909df2a44b73b64d120c7dc2127c790b46f53","modified":1606998768597},{"_id":"source/_posts/pip-change-source/2.png","hash":"ad7da954fa246859c19d1b7d909803cec8202256","modified":1606998777556},{"_id":"source/_posts/pip-change-source/3.png","hash":"ebf00ff921aa2c9f8c92e91f38cd5682520999ec","modified":1606998785153},{"_id":"source/_posts/pip-change-source/4.png","hash":"7203a2bbe9509c6a4596c31db87768681ed5e9f4","modified":1606998795238},{"_id":"source/_posts/pip-change-source/5.png","hash":"8b74c16e5c5f74db7fb74160f6710d8c2aa34cea","modified":1606998808121},{"_id":"source/_posts/pip-change-source/6.png","hash":"66844c6cbfba45a7d187655aa3699a2a688c8c3e","modified":1606998816133},{"_id":"source/_posts/pip-change-source/7.png","hash":"82d31a9d725cec12b4d1badce3932dcf98e9d98c","modified":1606998823506},{"_id":"source/_posts/pip-change-source/8.png","hash":"a10332794e7e9eb28a3bd205a50de37348b8b76e","modified":1606998831235},{"_id":"source/_posts/pip-change-source/9.png","hash":"02d52a204308eb8f671e63d084e504744786d8ca","modified":1606998839394},{"_id":"source/_posts/Dimensionless-processing-of-data/19.png","hash":"ec68c35c78e9076afb4ca33af811c419fcfd7be4","modified":1606804732305},{"_id":"source/_posts/Dimensionless-processing-of-data/20.png","hash":"6d0cc08d7d8cf2dde4fce43e8cc1e51f534cae48","modified":1606804745451},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1586054623000},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"ab610754bf6aea844b5ae0802ed37c73b5f1dc9f","modified":1586054623000},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1586054623000},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1586054623000},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1586054623000},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"a3a140e6aeeb6f289e4b821a577ef548267f3de1","modified":1586054623000},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1586054623000},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1586054623000},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1586054623000},{"_id":"source/_posts/Dimensionless-processing-of-data/7.png","hash":"aaa28fc3960eac8a116a5fdeb49edfe0fa535073","modified":1606804569907},{"_id":"source/_posts/sort-algorithms/1.png","hash":"cb9865eb782b293168e69406b212a0f3097b82a4","modified":1586054623000},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"d4042e5521ceb5f3255cd4455ac7ccd227fee6df","modified":1586054623000},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"e761f0104fbf431671bbe6bebc91ca82f737f4d2","modified":1586054623000},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"2adb36ed1e7c023f34debd3cad8e82a337c83e02","modified":1606987805052},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1586054623000},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"3a82fcb6f31d69971cb564985842c14ac02cdca0","modified":1586054623000},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"166c0b9753f3f913bd801e82ad5b268004be198d","modified":1586054623000},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1586054623000},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"cb4b8ddc71e5298f0aaf90cec323a891a2b7e6eb","modified":1606987784807},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1586054623000},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1586054623000},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1586054623000},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1586054623000},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1586054623000},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1586054623000},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"e2865b3003ec07892e9112692e7ec786ee926ae8","modified":1586054623000},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"c3039180ddb2eb17e724b8441e5f93e79859aef7","modified":1586054623000},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1586054623000},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"6ae58a57b83a5999d0b6a737ec868f084d208f89","modified":1586054623000},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1586054623000},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"3f208f33e4e12becdb8323e6e64e20ad60c3fb2a","modified":1586054623000},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1586054623000},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e73f10eacb5d00a0681cb44fe5c039cd8ab03cd","modified":1586054623000},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1586054623000},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1586054623000},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1586054623000},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1586054623000},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1586054623000},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"d439d86818de179d64965d4f7f5fa56147fd9221","modified":1586054623000},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1586054623000},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1586054623000},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1586054623000},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1586054623000},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1586054623000},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1586054623000},{"_id":"themes/matery/source/css/matery.css","hash":"0d345a72318fd7aadcb6fcaa6f3abac94b91001c","modified":1586054623000},{"_id":"themes/matery/source/medias/contact.jpg","hash":"5322ca54c3d0c7651991ffc94789111158e786a0","modified":1606052873401},{"_id":"themes/matery/source/medias/logo-1.png","hash":"0f4145b9a712f9662e4fae1b0086ce74cf1f9fc4","modified":1586054623000},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1586054623000},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1586054623000},{"_id":"source/_posts/Raspberry-Pi-camera/1.png","hash":"c1322f83da192aade68904606dbe47918a76194f","modified":1606981497964},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1586054623000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1586054623000},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1586054623000},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"b74a381adf6ef8404d6a0452c2b9f44b47219c80","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"ea8b51e4d75e7b2cd63e4d5bcb8db2cf7f23f5db","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","hash":"9cd57c67fbd3e3067f80793ef8445f5ff7783563","modified":1586054623000},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"215910dc8f63fd50b97957e5fcdc8480aa2728cb","modified":1586054623000},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1586054623000},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1586054623000},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1586054623000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1586054623000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1586054623000},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1586054623000},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1586054623000},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1586054623000},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1586054623000},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1586054623000},{"_id":"themes/matery/source/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1586054623000},{"_id":"themes/matery/source/libs/others/snow.js","hash":"b393f069781eef788a0ae66b2681cece8fea2851","modified":1586054623000},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1586054623000},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1586054623000},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/ajin.jpg","hash":"76cb8e872472ff47a1b061c3bcff1c03f30c02b8","modified":1586054623000},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","hash":"6850c3643f81caf79c8be7c454a501f0d3962e14","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/feibar.jpg","hash":"343f47cb5c83cd866a1c824cbe2a112d02516d06","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/masterx.jpg","hash":"c9f7e83d895fa241cefd6e742f356106b35f1b89","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/taotao.jpg","hash":"e668254375ddd40a684ff4669c3421851bebd36e","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/tawn.jpg","hash":"68a1cbacbb2370912b000c9d8d2b16196c918a50","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/yezijie.png","hash":"8a53537eb69f749115e512b6da061e7f23cd04e5","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"1f8bbfbd625448b4b2a748b75636e456b826dcd3","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"c4cc724f4572a9bcede7443a4f4c0393d3073868","modified":1586054623000},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1586054623000},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1586054623000},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1586054623000},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1586054623000},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"f1558f12d96a352e490166d543a8e821dd3bb2bc","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/jiejie.jpg","hash":"a52476e25bec2391674e77a889a89341fbb29791","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","hash":"992e0d803160d2ae867be5eb0032d324d1cedffb","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/xiejiadong.jpg","hash":"f1a31f89426bd4dccdaba2170f4fc701336702e1","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"309f484b6e69e877de6a7fb847d66497d22bbd65","modified":1586054623000},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"f63c7c489524ccb5d95e74fcd6618116c58fb305","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1586054623000},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1586054623000},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1586054623000},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1586054623000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1586054623000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1586054623000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1586054623000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1586054623000},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"2c27939768606603bee3b5e6c8a722596a667e60","modified":1586054623000},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1586054623000},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1586054623000},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"d4db93afdff4ce889dd8271bcf9e80eb3c0bf866","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"280fa1c6493d7fdccfc18bd486446bacd9afe623","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"02ec4566225102778c3837f08b24de02faf460a6","modified":1586054623000},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1586054623000},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"0f4211a0365e1aa439e439ffca5f330b031150be","modified":1606797468463},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1586054623000},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"4fcbc9dd8ec0316e9dd5bfd0caf86f1520b10b3f","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"1c1063c29f827cf52eeef7ca8dc2d7e4efa31a76","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"d8cc7a730668943dcb0776cfa240a0cf76826363","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"c2892770fd5617418fd33d6f834879e05b2cdafd","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"1d8863277d744e1a18a2778ac26041bda5b03a98","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/28.jpg","hash":"c73036359640a67a8b17db7ba0e968c088957ab8","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"6ddd1bcbb62a2d28c5be3b9acb7418849d60b2e7","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"ee598933707f8bb98ecbf36925f24e8a1c4bd2d6","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"d0668539783fc615f14178644e486a6befb90c0c","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/27.jpg","hash":"7ea6f890cc59def8b1c9f393e4ae77cd16c79aad","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"698fc46e97428d73c9d4e3d254e88b9b66fb38cd","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"bd400da9123424afe7ba6c839be9ad7697c1245b","modified":1586054623000},{"_id":"themes/matery/source/favicon.png","hash":"bd296d1cfe6aecaa443322b0a44f984c3e9a6c5e","modified":1570158217076},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/feibar.png","hash":"eceaefcbbca1bf49b582eaa649d311cf4fe69dd6","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1586054623000},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"255aaa4375da855bd80b38cfcc253de892a9d4cf","modified":1586054623000},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"a3cfdee2120195ab36b2fdd074d5558852e69297","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"66de48d963e7f221931e550b2442da0cd40cbaa8","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"84ba9cf61045de789426eeb6333910266ce29b8c","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"a77810cc2224446f5d4e1a857a8d480f21e81f83","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"72bc68fb0673b84ab9f863d2979396cdc268a76c","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/26.jpg","hash":"c66a4e7a2e670b63759a091f9428ee7f971d7b56","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"ceb8e0c195a7fe7420334efa114e98cd0e1c6523","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"11a6de283124964370dbfaf0e74f2f1e9ac8394d","modified":1586054623000},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"542279c640dcc37c6c944e9f7f8e002c34069087","modified":1606797445838},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"0801e96a2f4cbd14b2ad44547e5ffbb23822e751","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"2b30186c6d78ed76fa5f278be57290c1bd22c96a","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"2a47d1123d9c4c6255b7b4817a582d2fa9aea808","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"f1d720039d654d693c32150c06c78cfc3663b0b4","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"c74ce6fa4eee122e147ec55532744f34a87ae2bf","modified":1586054623000},{"_id":"themes/matery/source/medias/logo.png","hash":"bd296d1cfe6aecaa443322b0a44f984c3e9a6c5e","modified":1570158217076},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"f81e97edf705ab45b989b2b15d6a13c005ccaa32","modified":1586054623000},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"aff885598033614639944c7559b4849f883e2b34","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"cd54b116609f5741cc7db0f7f49bf56ac356ddfb","modified":1586054623000},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1586054623000},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"e06afe32a867f7a6e861618e0b5ac9d93cd71d05","modified":1586054623000},{"_id":"public/baidu_urls.txt","hash":"9c8be3e7723545698b89666a1a25ccaf150c581b","modified":1606998858368},{"_id":"public/baidusitemap.xml","hash":"aa2213d3865adb06b14a2490398376f5836bfeea","modified":1606998858368},{"_id":"public/atom.xml","hash":"538cb4a192e311c89bf91aa4eb70b85a8a0f0326","modified":1606998858582},{"_id":"public/search.xml","hash":"62a8661e6eae27b2bb88e1f942891df27fc5fd3f","modified":1606998858651},{"_id":"public/sitemap.xml","hash":"6e134da3708f794c0a8de149644c47e12be25b60","modified":1606998858651},{"_id":"public/404.html","hash":"f2911378fa06cc95031aee91d2d1e034ef3e6852","modified":1606998858670},{"_id":"public/archives/index.html","hash":"d99970a8199c703bfbfb9220ff3390aca07420a0","modified":1606998858670},{"_id":"public/categories/index.html","hash":"3b99808826c12a007106d1fa34a1dc159110b5b7","modified":1606998858688},{"_id":"public/friends/index.html","hash":"d8b5f1764b71129d4b62ae7f9d4ed1c7206d68b7","modified":1606998858691},{"_id":"public/tags/index.html","hash":"809a7ce0b161d98f99b6e1bf245a0a7fb34c7c35","modified":1606998858691},{"_id":"public/about/index.html","hash":"44ecd640ddb6452e5af658b3180e7778c9112594","modified":1606998858691},{"_id":"public/contact/index.html","hash":"2dadf5958275870c3940d6d7f5d5f26d43e07788","modified":1606999800109},{"_id":"public/2020/12/03/raspberry-pi-camera/index.html","hash":"b34828fcc83b2f62506c4747659ba21078d21978","modified":1606999800109},{"_id":"public/2020/12/01/dimensionless-processing-of-data/index.html","hash":"b624e5d8acda727e9312e33946e8ce1ee8128eca","modified":1606999800109},{"_id":"public/2020/02/16/sort-algorithms/index.html","hash":"aee6c2d773c854de07627471f0642e89adfba1fa","modified":1606999800109},{"_id":"public/2020/12/01/ji-yu-hun-dun-logistic-jia-mi-suan-fa-de-tu-pian-jia-mi-yu-huan-yuan/index.html","hash":"2594eaf778fceebb9f5d0815bda0f3dc482b4585","modified":1606999800109},{"_id":"public/archives/2020/index.html","hash":"0c8f60c31712fabaf851e44674c4a32c87540e61","modified":1606998858692},{"_id":"public/archives/2020/02/index.html","hash":"2f453c122aa848aeb313029100d379afffe7b2a0","modified":1606998858692},{"_id":"public/archives/2020/12/index.html","hash":"f0915d56a1211d153dd28377edb290a42e9fd6a9","modified":1606998858692},{"_id":"public/categories/python/index.html","hash":"7fd11a2fb9ea58ad4ca7d4250d2b87a5bee737d0","modified":1606998858692},{"_id":"public/categories/编程算法/index.html","hash":"848348f63e57e942ebc6c802298a98fcc2ea98cb","modified":1606998858692},{"_id":"public/categories/数字图像处理/index.html","hash":"15213e885d4101f0a0639dba89d77f26b82a482a","modified":1606998858692},{"_id":"public/categories/数学建模/index.html","hash":"f9e2d012da6ef674193d5803cc052b9c0d0dee24","modified":1606998858693},{"_id":"public/index.html","hash":"da15fdf81cd29c6e661d08abe959742849eb38c3","modified":1606998858693},{"_id":"public/tags/python/index.html","hash":"b335b5a85eb3d7523e85079d3a0427d8d0acb82e","modified":1606998858693},{"_id":"public/tags/Raspberry-Pi/index.html","hash":"128db529653e7a68c153132e9760354f1a1674e3","modified":1606998858693},{"_id":"public/tags/网络/index.html","hash":"37cb57c97fcee805f0c95cad903f571183297484","modified":1606998858693},{"_id":"public/tags/leetcode/index.html","hash":"c7625639f2c39f650f924cc974af3947f5a40857","modified":1606998858693},{"_id":"public/tags/算法/index.html","hash":"f95d845ec7196efcb7f724e674e06f37da9c2b9b","modified":1606998858693},{"_id":"public/tags/Logistic加密/index.html","hash":"d3c3759f52379516a63b08f8aec0cba17fb624c8","modified":1606998858693},{"_id":"public/tags/matlab/index.html","hash":"af7418b5afe5d0d26b2806faccdf70712a71bb78","modified":1606998858693},{"_id":"public/tags/数字图像处理/index.html","hash":"0d90ad6d02a9a243b32f05d52840c125d09831cf","modified":1606998858693},{"_id":"public/tags/数学分析模型/index.html","hash":"46f510f4867b6b4586baa52959d14f34e03f1c8c","modified":1606998858693},{"_id":"public/2020/12/03/pip-change-source/index.html","hash":"ae3288a96b6ac13bd44501082b461b3c3a24e2a7","modified":1606999800109},{"_id":"public/tags/pip/index.html","hash":"f1487313b5175234747e7e5b4adc01c76ef8ee8e","modified":1606998858711},{"_id":"public/CNAME","hash":"a272f86b2a87102f8735a8369199dafb0edfc33e","modified":1606998858727},{"_id":"public/favicon-1.png","hash":"0f4145b9a712f9662e4fae1b0086ce74cf1f9fc4","modified":1606998858727},{"_id":"public/medias/contact.jpg","hash":"5322ca54c3d0c7651991ffc94789111158e786a0","modified":1606998858727},{"_id":"public/medias/logo-1.png","hash":"0f4145b9a712f9662e4fae1b0086ce74cf1f9fc4","modified":1606998858727},{"_id":"public/medias/avatars/ajin.jpg","hash":"76cb8e872472ff47a1b061c3bcff1c03f30c02b8","modified":1606998858728},{"_id":"public/medias/avatars/avatar.jpg","hash":"6850c3643f81caf79c8be7c454a501f0d3962e14","modified":1606998858728},{"_id":"public/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1606998858728},{"_id":"public/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1606998858728},{"_id":"public/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1606998858728},{"_id":"public/medias/avatars/feibar.jpg","hash":"343f47cb5c83cd866a1c824cbe2a112d02516d06","modified":1606998858728},{"_id":"public/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1606998858728},{"_id":"public/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1606998858728},{"_id":"public/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1606998858728},{"_id":"public/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1606998858728},{"_id":"public/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1606998858728},{"_id":"public/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1606998858728},{"_id":"public/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1606998858728},{"_id":"public/medias/avatars/masterx.jpg","hash":"c9f7e83d895fa241cefd6e742f356106b35f1b89","modified":1606998858728},{"_id":"public/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1606998858728},{"_id":"public/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1606998858728},{"_id":"public/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1606998858728},{"_id":"public/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1606998858728},{"_id":"public/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1606998858729},{"_id":"public/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1606998858729},{"_id":"public/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1606998858729},{"_id":"public/medias/avatars/taotao.jpg","hash":"e668254375ddd40a684ff4669c3421851bebd36e","modified":1606998858729},{"_id":"public/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1606998858729},{"_id":"public/medias/avatars/tawn.jpg","hash":"68a1cbacbb2370912b000c9d8d2b16196c918a50","modified":1606998858729},{"_id":"public/medias/avatars/yezijie.png","hash":"8a53537eb69f749115e512b6da061e7f23cd04e5","modified":1606998858729},{"_id":"public/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1606998858729},{"_id":"public/medias/featureimages/0.jpg","hash":"1f8bbfbd625448b4b2a748b75636e456b826dcd3","modified":1606998858729},{"_id":"public/medias/featureimages/5.jpg","hash":"c4cc724f4572a9bcede7443a4f4c0393d3073868","modified":1606998858729},{"_id":"public/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1606998858729},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1606998858729},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1606998858729},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1606998858729},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1606998858729},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1606998858729},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1606998858729},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1606998858729},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1606998858730},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1606998858730},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1606998858730},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1606998858730},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1606998858730},{"_id":"public/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1606998858730},{"_id":"public/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1606998858730},{"_id":"public/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1606998858730},{"_id":"public/2020/02/16/sort-algorithms/1.png","hash":"cb9865eb782b293168e69406b212a0f3097b82a4","modified":1606998858730},{"_id":"public/2020/12/01/dimensionless-processing-of-data/1.png","hash":"99ccc7724643508fcf67caed0a3733072625f05a","modified":1606998858730},{"_id":"public/2020/12/01/dimensionless-processing-of-data/10.png","hash":"9bc78416b24f0428aa5ca26e657c37424d60a828","modified":1606998858730},{"_id":"public/2020/12/01/dimensionless-processing-of-data/12.png","hash":"c1082b99f7080c7af317cfb142447a0608a6fd8b","modified":1606998858730},{"_id":"public/2020/12/01/dimensionless-processing-of-data/11.png","hash":"e651502cf0f13a5690bfd55928d12732ff6fbd5e","modified":1606998858730},{"_id":"public/2020/12/01/dimensionless-processing-of-data/13.png","hash":"682d548c43aef83806eabd09d4cbd3cccba364f2","modified":1606998858730},{"_id":"public/2020/12/01/dimensionless-processing-of-data/15.png","hash":"7bbef6b9baa145cf425a022dd0abfbb5fe85347d","modified":1606998858730},{"_id":"public/2020/12/01/dimensionless-processing-of-data/14.png","hash":"201f89690b94391bc32610c99d5ef2c3a38776d8","modified":1606998858730},{"_id":"public/2020/12/01/dimensionless-processing-of-data/16.png","hash":"856cc6601bbf58c25000efb59cd027e830032a51","modified":1606998858730},{"_id":"public/2020/12/01/dimensionless-processing-of-data/17.png","hash":"a7d4991d6956f30245315e26f96faeb30d58fe96","modified":1606998858730},{"_id":"public/2020/12/01/dimensionless-processing-of-data/18.png","hash":"9981c508409438839db94d5da7eeed564758b873","modified":1606998858730},{"_id":"public/2020/12/01/dimensionless-processing-of-data/19.png","hash":"ec68c35c78e9076afb4ca33af811c419fcfd7be4","modified":1606998858730},{"_id":"public/2020/12/01/dimensionless-processing-of-data/2.png","hash":"97b76fc43e1f78f1a14cdba90dcfdd732693297c","modified":1606998858730},{"_id":"public/2020/12/01/dimensionless-processing-of-data/20.png","hash":"6d0cc08d7d8cf2dde4fce43e8cc1e51f534cae48","modified":1606998858731},{"_id":"public/2020/12/01/dimensionless-processing-of-data/21.png","hash":"7577a2ad832b9a4d518528e2a133a6503ae542c4","modified":1606998858731},{"_id":"public/2020/12/01/dimensionless-processing-of-data/3.png","hash":"993e01feedbce5f6361ae84778e6aac8e7e22a48","modified":1606998858731},{"_id":"public/2020/12/01/dimensionless-processing-of-data/22.png","hash":"1485a8dadab3f4d455d6bb4f24649ec0b382f8b0","modified":1606998858731},{"_id":"public/2020/12/01/dimensionless-processing-of-data/5.png","hash":"e8e68122730736047a2d80c88e001c9a91e649c7","modified":1606998858731},{"_id":"public/2020/12/01/dimensionless-processing-of-data/6.png","hash":"8fcf27710492c1e57cddf75f13321af184668438","modified":1606998858731},{"_id":"public/2020/12/01/dimensionless-processing-of-data/8.png","hash":"fa5a91bb8a660e127d1d4d6968e3bd4bc08c8cbc","modified":1606998858731},{"_id":"public/2020/12/01/dimensionless-processing-of-data/7.png","hash":"aaa28fc3960eac8a116a5fdeb49edfe0fa535073","modified":1606998858731},{"_id":"public/2020/12/01/dimensionless-processing-of-data/4.png","hash":"9d5b322556af662a8d6efff3aacbc73957cc4d06","modified":1606998858731},{"_id":"public/2020/12/01/dimensionless-processing-of-data/9.png","hash":"a021432545bf9f623633c36e3c0056b62ec567b5","modified":1606998858731},{"_id":"public/2020/12/03/pip-change-source/1.png","hash":"2f6909df2a44b73b64d120c7dc2127c790b46f53","modified":1606998858731},{"_id":"public/2020/12/03/pip-change-source/2.png","hash":"ad7da954fa246859c19d1b7d909803cec8202256","modified":1606998858731},{"_id":"public/2020/12/03/pip-change-source/3.png","hash":"ebf00ff921aa2c9f8c92e91f38cd5682520999ec","modified":1606998858731},{"_id":"public/2020/12/03/pip-change-source/4.png","hash":"7203a2bbe9509c6a4596c31db87768681ed5e9f4","modified":1606998858731},{"_id":"public/2020/12/03/pip-change-source/5.png","hash":"8b74c16e5c5f74db7fb74160f6710d8c2aa34cea","modified":1606998858731},{"_id":"public/2020/12/03/pip-change-source/6.png","hash":"66844c6cbfba45a7d187655aa3699a2a688c8c3e","modified":1606998858731},{"_id":"public/2020/12/03/pip-change-source/7.png","hash":"82d31a9d725cec12b4d1badce3932dcf98e9d98c","modified":1606998858731},{"_id":"public/2020/12/03/pip-change-source/8.png","hash":"a10332794e7e9eb28a3bd205a50de37348b8b76e","modified":1606998858731},{"_id":"public/2020/12/03/pip-change-source/9.png","hash":"02d52a204308eb8f671e63d084e504744786d8ca","modified":1606998858731},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1606998858731},{"_id":"public/css/prism-tomorrow.css","hash":"7efd268869bf07673639975ec764c9bdffd0fb04","modified":1606998858731},{"_id":"public/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1606998858745},{"_id":"public/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1606998858748},{"_id":"public/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1606998858758},{"_id":"public/medias/avatars/jiejie.jpg","hash":"a52476e25bec2391674e77a889a89341fbb29791","modified":1606998858758},{"_id":"public/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1606998858758},{"_id":"public/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1606998858758},{"_id":"public/medias/avatars/myzhihu.png","hash":"992e0d803160d2ae867be5eb0032d324d1cedffb","modified":1606998858758},{"_id":"public/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1606998858759},{"_id":"public/medias/avatars/xiejiadong.jpg","hash":"f1a31f89426bd4dccdaba2170f4fc701336702e1","modified":1606998858759},{"_id":"public/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1606998858759},{"_id":"public/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1606998858761},{"_id":"public/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1606998858761},{"_id":"public/medias/banner/1.jpg","hash":"309f484b6e69e877de6a7fb847d66497d22bbd65","modified":1606998858761},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1606998858761},{"_id":"public/medias/reward/wechat.png","hash":"0f4211a0365e1aa439e439ffca5f330b031150be","modified":1606998858761},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1606998858761},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1606998858775},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1606998858775},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1606998858780},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1606998858780},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1606998858780},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1606998858780},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1606998858781},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1606998858781},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"b74a381adf6ef8404d6a0452c2b9f44b47219c80","modified":1606998858781},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"215910dc8f63fd50b97957e5fcdc8480aa2728cb","modified":1606998858781},{"_id":"public/libs/codeBlock/codeLang.js","hash":"ea8b51e4d75e7b2cd63e4d5bcb8db2cf7f23f5db","modified":1606998858781},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1606998858781},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1606998858781},{"_id":"public/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1606998858781},{"_id":"public/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1606998858781},{"_id":"public/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1606998858781},{"_id":"public/libs/others/snow.js","hash":"7f3b1ad2f64d4473210a2c3218893649c73c980e","modified":1606998858781},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1606998858781},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1606998858781},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1606998858781},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1606998858781},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1606998858781},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1606998858781},{"_id":"public/css/matery.css","hash":"caa63c2c7908e45ebbbea0fbdc72d09b7b6d5b76","modified":1606998858781},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1606998858781},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1606998858781},{"_id":"public/libs/codeBlock/clipboard.min.js","hash":"9cd57c67fbd3e3067f80793ef8445f5ff7783563","modified":1606998858781},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1606998858781},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1606998858781},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1606998858782},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1606998858782},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1606998858782},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1606998858782},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1606998858782},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1606998858782},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1606998858782},{"_id":"public/libs/valine/Valine.min.js","hash":"4e34802ccbb59f1daa58a62241ff57f923e50600","modified":1606998858782},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"28bdb33c9eb609c2f30d431df1a4cf8ca70bf841","modified":1606998858782},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1606998858782},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1606998858782},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1606998858782},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1606998858782},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1606998858782},{"_id":"public/libs/materialize/materialize.min.css","hash":"4d46df5f22cbc24eefa76228c7ee308dc3585594","modified":1606998858783},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1606998858783},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1606998858783},{"_id":"public/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1606998858783},{"_id":"public/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1606998858783},{"_id":"public/medias/banner/0.jpg","hash":"d4db93afdff4ce889dd8271bcf9e80eb3c0bf866","modified":1606998858783},{"_id":"public/medias/banner/2.jpg","hash":"280fa1c6493d7fdccfc18bd486446bacd9afe623","modified":1606998858783},{"_id":"public/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1606998858783},{"_id":"public/medias/banner/6.jpg","hash":"4fcbc9dd8ec0316e9dd5bfd0caf86f1520b10b3f","modified":1606998858783},{"_id":"public/medias/featureimages/14.jpg","hash":"1c1063c29f827cf52eeef7ca8dc2d7e4efa31a76","modified":1606998858783},{"_id":"public/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1606998858784},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1606998858784},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1606998858784},{"_id":"public/medias/featureimages/13.jpg","hash":"d8cc7a730668943dcb0776cfa240a0cf76826363","modified":1606998858784},{"_id":"public/2020/12/03/raspberry-pi-camera/1.png","hash":"c1322f83da192aade68904606dbe47918a76194f","modified":1606998858784},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1606998858792},{"_id":"public/medias/featureimages/22.jpg","hash":"02ec4566225102778c3837f08b24de02faf460a6","modified":1606998858792},{"_id":"public/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1606998858794},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1606998858794},{"_id":"public/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1606998858794},{"_id":"public/medias/featureimages/28.jpg","hash":"c73036359640a67a8b17db7ba0e968c088957ab8","modified":1606998858807},{"_id":"public/medias/featureimages/12.jpg","hash":"c2892770fd5617418fd33d6f834879e05b2cdafd","modified":1606998858807},{"_id":"public/medias/avatars/feibar.png","hash":"eceaefcbbca1bf49b582eaa649d311cf4fe69dd6","modified":1606998858807},{"_id":"public/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1606998858807},{"_id":"public/medias/banner/3.jpg","hash":"255aaa4375da855bd80b38cfcc253de892a9d4cf","modified":1606998858807},{"_id":"public/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1606998858807},{"_id":"public/medias/reward/alipay.jpg","hash":"542279c640dcc37c6c944e9f7f8e002c34069087","modified":1606998858807},{"_id":"public/medias/featureimages/2.jpg","hash":"1d8863277d744e1a18a2778ac26041bda5b03a98","modified":1606998858823},{"_id":"public/medias/featureimages/25.jpg","hash":"d0668539783fc615f14178644e486a6befb90c0c","modified":1606998858823},{"_id":"public/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1606998858823},{"_id":"public/medias/banner/4.jpg","hash":"a3cfdee2120195ab36b2fdd074d5558852e69297","modified":1606998858823},{"_id":"public/medias/featureimages/26.jpg","hash":"c66a4e7a2e670b63759a091f9428ee7f971d7b56","modified":1606998858824},{"_id":"public/medias/featureimages/17.jpg","hash":"11a6de283124964370dbfaf0e74f2f1e9ac8394d","modified":1606998858824},{"_id":"public/medias/banner/5.jpg","hash":"6ddd1bcbb62a2d28c5be3b9acb7418849d60b2e7","modified":1606998858829},{"_id":"public/medias/featureimages/6.jpg","hash":"698fc46e97428d73c9d4e3d254e88b9b66fb38cd","modified":1606998858829},{"_id":"public/medias/featureimages/27.jpg","hash":"7ea6f890cc59def8b1c9f393e4ae77cd16c79aad","modified":1606998858830},{"_id":"public/medias/featureimages/10.jpg","hash":"66de48d963e7f221931e550b2442da0cd40cbaa8","modified":1606998858830},{"_id":"public/medias/featureimages/24.jpg","hash":"72bc68fb0673b84ab9f863d2979396cdc268a76c","modified":1606998858830},{"_id":"public/medias/featureimages/3.jpg","hash":"ceb8e0c195a7fe7420334efa114e98cd0e1c6523","modified":1606998858830},{"_id":"public/medias/featureimages/18.jpg","hash":"c74ce6fa4eee122e147ec55532744f34a87ae2bf","modified":1606998858831},{"_id":"public/medias/featureimages/20.jpg","hash":"84ba9cf61045de789426eeb6333910266ce29b8c","modified":1606998858835},{"_id":"public/medias/featureimages/21.jpg","hash":"a77810cc2224446f5d4e1a857a8d480f21e81f83","modified":1606998858835},{"_id":"public/medias/featureimages/16.jpg","hash":"0801e96a2f4cbd14b2ad44547e5ffbb23822e751","modified":1606998858835},{"_id":"public/medias/featureimages/19.jpg","hash":"2a47d1123d9c4c6255b7b4817a582d2fa9aea808","modified":1606998858836},{"_id":"public/medias/featureimages/1.jpg","hash":"f1d720039d654d693c32150c06c78cfc3663b0b4","modified":1606998858836},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1606998858836},{"_id":"public/medias/featureimages/23.jpg","hash":"ee598933707f8bb98ecbf36925f24e8a1c4bd2d6","modified":1606998858840},{"_id":"public/medias/featureimages/11.jpg","hash":"2b30186c6d78ed76fa5f278be57290c1bd22c96a","modified":1606998858840},{"_id":"public/medias/featureimages/7.jpg","hash":"bd400da9123424afe7ba6c839be9ad7697c1245b","modified":1606998858844},{"_id":"public/favicon.png","hash":"bd296d1cfe6aecaa443322b0a44f984c3e9a6c5e","modified":1606998858848},{"_id":"public/medias/featureimages/8.jpg","hash":"f81e97edf705ab45b989b2b15d6a13c005ccaa32","modified":1606998858848},{"_id":"public/medias/logo.png","hash":"bd296d1cfe6aecaa443322b0a44f984c3e9a6c5e","modified":1606998858848},{"_id":"public/medias/featureimages/15.jpg","hash":"aff885598033614639944c7559b4849f883e2b34","modified":1606998858851},{"_id":"public/medias/featureimages/9.jpg","hash":"cd54b116609f5741cc7db0f7f49bf56ac356ddfb","modified":1606998858852},{"_id":"public/medias/featureimages/4.jpg","hash":"e06afe32a867f7a6e861618e0b5ac9d93cd71d05","modified":1606998858853}],"Category":[{"name":"python","_id":"cki8tmm490005v8vbdsiq2kzq"},{"name":"编程算法","_id":"cki8tmm5j000fv8vbz9nya1so"},{"name":"数字图像处理","_id":"cki8tmm5m000lv8vb92ttq8q9"},{"name":"数学建模","_id":"cki8tmm6b0014v8vbuu7qklt2"}],"Data":[{"_id":"friends","data":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}]},{"_id":"musics","data":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2020-04-05T02:43:43.000Z","path":"404.html","comments":1,"_id":"cki8tmlyw0000v8vboj22pvtx","content":"","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2020-04-05T02:43:43.000Z","path":"archives/index.html","comments":1,"_id":"cki8tmm450002v8vbv5hjsqs5","content":"","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2020-04-05T02:43:43.000Z","path":"categories/index.html","comments":1,"_id":"cki8tmm480004v8vbdiy8dpjl","content":"","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"friends","date":"2019-07-19T08:42:10.000Z","type":"friends","layout":"friends","_content":"\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**gain-wyj\n* **地址：**https://gain-wyj.cn\n* **简介：**公众号【做一个柔情的程序猿】，分享python和matlab算法\n","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-07-19 16:42:10\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**gain-wyj\n* **地址：**https://gain-wyj.cn\n* **简介：**公众号【做一个柔情的程序猿】，分享python和matlab算法\n","updated":"2020-12-01T02:49:55.883Z","path":"friends/index.html","comments":1,"_id":"cki8tmm4d0008v8vbhi6q51dx","content":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>gain-wyj</li>\n<li><strong>地址：</strong><a href=\"https://gain-wyj.cn\">https://gain-wyj.cn</a></li>\n<li><strong>简介：</strong>公众号【做一个柔情的程序猿】，分享python和matlab算法</li>\n</ul>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>gain-wyj</li>\n<li><strong>地址：</strong><a href=\"https://gain-wyj.cn\">https://gain-wyj.cn</a></li>\n<li><strong>简介：</strong>公众号【做一个柔情的程序猿】，分享python和matlab算法</li>\n</ul>\n"},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2020-04-05T02:43:43.000Z","path":"tags/index.html","comments":1,"_id":"cki8tmm4i000av8vbzdb1fk2s","content":"","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-12-01T02:41:10.000Z","type":"about","layout":"about","_content":"\n\n## 教育经历\n* <b>硕士 信息与通信工程</b>\n北京印刷学院\n2019/09 - 现在\n* <b>本科 物联网工程</b>\n西南科技大学\n2015/09 - 2019/06\n<b>综合排名专业第四</b>\n\n## 获得荣誉\n\n### 2019\n\n* <b>国家励志奖学金</b>\n大四学年\n* <b>优秀团员</b>\n校级\n* <b>三好学生</b>\n校级\n* <b>学习成绩优秀奖</b>\n校级\n\n### 2018\n\n* <b>国家励志奖学金</b>\n大三学年\n* <b>道德风尚奖</b>\n校级\n* <b>三好学生</b>\n校级\n* <b>学习成绩优秀奖</b>\n校级\n* <b>优秀学生干部</b>\n校级\n\n### 2017\n* <b>国家一等奖</b>\n第十六届全国大学生机器人大赛 Robocon 赛事\n* <b>国家励志奖学金</b>\n大二学年\n* <b>国家三等奖</b>\n“数创杯”全国大学生数学建模挑战赛\n* <b>道德风尚奖</b>\n校级\n* <b>三好学生</b>\n校级\n\n## 联系方式\n* <b>电子邮箱</b>\n3286547557@qq.com\n18281693803@163.com\n* <b>地址</b>\n北京市大兴区，邮编106200\n* <b>QQ 技术交流</b>\n3286547557\n\n![](https://i.loli.net/2020/12/01/rRvDLHseiCYhAJm.jpg)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-12-01 10:41:10\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n## 教育经历\n* <b>硕士 信息与通信工程</b>\n北京印刷学院\n2019/09 - 现在\n* <b>本科 物联网工程</b>\n西南科技大学\n2015/09 - 2019/06\n<b>综合排名专业第四</b>\n\n## 获得荣誉\n\n### 2019\n\n* <b>国家励志奖学金</b>\n大四学年\n* <b>优秀团员</b>\n校级\n* <b>三好学生</b>\n校级\n* <b>学习成绩优秀奖</b>\n校级\n\n### 2018\n\n* <b>国家励志奖学金</b>\n大三学年\n* <b>道德风尚奖</b>\n校级\n* <b>三好学生</b>\n校级\n* <b>学习成绩优秀奖</b>\n校级\n* <b>优秀学生干部</b>\n校级\n\n### 2017\n* <b>国家一等奖</b>\n第十六届全国大学生机器人大赛 Robocon 赛事\n* <b>国家励志奖学金</b>\n大二学年\n* <b>国家三等奖</b>\n“数创杯”全国大学生数学建模挑战赛\n* <b>道德风尚奖</b>\n校级\n* <b>三好学生</b>\n校级\n\n## 联系方式\n* <b>电子邮箱</b>\n3286547557@qq.com\n18281693803@163.com\n* <b>地址</b>\n北京市大兴区，邮编106200\n* <b>QQ 技术交流</b>\n3286547557\n\n![](https://i.loli.net/2020/12/01/rRvDLHseiCYhAJm.jpg)\n","updated":"2020-12-01T02:43:58.708Z","path":"about/index.html","comments":1,"_id":"cki8tmm4k000dv8vb0mw5bicp","content":"<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><ul>\n<li><b>硕士 信息与通信工程</b><br>北京印刷学院<br>2019/09 - 现在</li>\n<li><b>本科 物联网工程</b><br>西南科技大学<br>2015/09 - 2019/06<br><b>综合排名专业第四</b></li>\n</ul>\n<h2 id=\"获得荣誉\"><a href=\"#获得荣誉\" class=\"headerlink\" title=\"获得荣誉\"></a>获得荣誉</h2><h3 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h3><ul>\n<li><b>国家励志奖学金</b><br>大四学年</li>\n<li><b>优秀团员</b><br>校级</li>\n<li><b>三好学生</b><br>校级</li>\n<li><b>学习成绩优秀奖</b><br>校级</li>\n</ul>\n<h3 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h3><ul>\n<li><b>国家励志奖学金</b><br>大三学年</li>\n<li><b>道德风尚奖</b><br>校级</li>\n<li><b>三好学生</b><br>校级</li>\n<li><b>学习成绩优秀奖</b><br>校级</li>\n<li><b>优秀学生干部</b><br>校级</li>\n</ul>\n<h3 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h3><ul>\n<li><b>国家一等奖</b><br>第十六届全国大学生机器人大赛 Robocon 赛事</li>\n<li><b>国家励志奖学金</b><br>大二学年</li>\n<li><b>国家三等奖</b><br>“数创杯”全国大学生数学建模挑战赛</li>\n<li><b>道德风尚奖</b><br>校级</li>\n<li><b>三好学生</b><br>校级</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:3286547557@qq.com\" target=\"_blank\" rel=\"noopener\">3286547557@qq.com</a><br><a href=\"mailto:18281693803@163.com\" target=\"_blank\" rel=\"noopener\">18281693803@163.com</a></li>\n<li><b>地址</b><br>北京市大兴区，邮编106200</li>\n<li><b>QQ 技术交流</b><br>3286547557</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/12/01/rRvDLHseiCYhAJm.jpg\" alt></p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><ul>\n<li><b>硕士 信息与通信工程</b><br>北京印刷学院<br>2019/09 - 现在</li>\n<li><b>本科 物联网工程</b><br>西南科技大学<br>2015/09 - 2019/06<br><b>综合排名专业第四</b></li>\n</ul>\n<h2 id=\"获得荣誉\"><a href=\"#获得荣誉\" class=\"headerlink\" title=\"获得荣誉\"></a>获得荣誉</h2><h3 id=\"2019\"><a href=\"#2019\" class=\"headerlink\" title=\"2019\"></a>2019</h3><ul>\n<li><b>国家励志奖学金</b><br>大四学年</li>\n<li><b>优秀团员</b><br>校级</li>\n<li><b>三好学生</b><br>校级</li>\n<li><b>学习成绩优秀奖</b><br>校级</li>\n</ul>\n<h3 id=\"2018\"><a href=\"#2018\" class=\"headerlink\" title=\"2018\"></a>2018</h3><ul>\n<li><b>国家励志奖学金</b><br>大三学年</li>\n<li><b>道德风尚奖</b><br>校级</li>\n<li><b>三好学生</b><br>校级</li>\n<li><b>学习成绩优秀奖</b><br>校级</li>\n<li><b>优秀学生干部</b><br>校级</li>\n</ul>\n<h3 id=\"2017\"><a href=\"#2017\" class=\"headerlink\" title=\"2017\"></a>2017</h3><ul>\n<li><b>国家一等奖</b><br>第十六届全国大学生机器人大赛 Robocon 赛事</li>\n<li><b>国家励志奖学金</b><br>大二学年</li>\n<li><b>国家三等奖</b><br>“数创杯”全国大学生数学建模挑战赛</li>\n<li><b>道德风尚奖</b><br>校级</li>\n<li><b>三好学生</b><br>校级</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:3286547557@qq.com\" target=\"_blank\" rel=\"noopener\">3286547557@qq.com</a><br><a href=\"mailto:18281693803@163.com\" target=\"_blank\" rel=\"noopener\">18281693803@163.com</a></li>\n<li><b>地址</b><br>北京市大兴区，邮编106200</li>\n<li><b>QQ 技术交流</b><br>3286547557</li>\n</ul>\n<p><img src=\"https://i.loli.net/2020/12/01/rRvDLHseiCYhAJm.jpg\" alt></p>\n"},{"title":"contact","date":"2019-07-26T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流【群号：3286547557】。\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**gain-wyj\n* **地址：**https://gain-wyj.cn\n* **简介：**公众号【做一个柔情的程序猿】，分享python和matlab算法\n","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-07-26 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流【群号：3286547557】。\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**gain-wyj\n* **地址：**https://gain-wyj.cn\n* **简介：**公众号【做一个柔情的程序猿】，分享python和matlab算法\n","updated":"2020-12-01T02:49:19.620Z","path":"contact/index.html","comments":1,"_id":"cki8tmm5i000ev8vbmqeaccxe","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流【群号：3286547557】。</p>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>gain-wyj</li>\n<li><strong>地址：</strong><a href=\"https://gain-wyj.cn\">https://gain-wyj.cn</a></li>\n<li><strong>简介：</strong>公众号【做一个柔情的程序猿】，分享python和matlab算法</li>\n</ul>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流【群号：3286547557】。</p>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>gain-wyj</li>\n<li><strong>地址：</strong><a href=\"https://gain-wyj.cn\">https://gain-wyj.cn</a></li>\n<li><strong>简介：</strong>公众号【做一个柔情的程序猿】，分享python和matlab算法</li>\n</ul>\n"}],"Post":[{"title":"手把手教你进行pip换源","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-12-03T12:27:39.000Z","password":null,"summary":"学习python，最重要的是我们需要的各样第三方资源包，没有他们学习python是寸步难行，正常情况下大家都是通过在终端输入命令行pip install xx进行安装，但是一般下载都是非常缓慢的，因此就需要自己去换源，加快资源包下载速度。","_content":"\n## 为什么要换源\n学习python，最重要的是我们需要的各样第三方资源包，比如爬虫，有`requests，xpath`，爬虫界的扛把子`Scrapy；Web有django，flask，restframework`；可视化pyQT有`PyQt5，PyQt5.QtWidgets，skimage，cv2`数据可视化届的扛把子`dlib，basemap，pyproj`，其他的比如`sys，os，datatime`等等，没有他们学习python是寸步难行，正常情况下大家都是通过在终端输入命令行`pip install xx`进行安装，但是我相信，以下这种情况大家肯定遇到过：\n\n![](https://img-blog.csdnimg.cn/20200316194419813.png)\n\n可以看到，安装资源包的过程非常的慢，可能都是几KB/s，有时甚至是一百多B/s，但是正常的网速最起码有3-5M/s，这就比较不开心了，最恶心的是，安装的慢就算了，可能安装安装着，直接error了，嗯...哭吧\n\n![](https://img-blog.csdnimg.cn/20200316194520677.png)\n\n还有一种情况是什么呢，就是这种，直接飘黄，警告，恶心吧。。。\n\n![](https://img-blog.csdnimg.cn/2020031619452719.png)\n\n***为什么会造成这种情况呢？***\n\n因为需要的获取的资源包，默认是直接从pypi官网获取的，而pypi是国外的网速就慢，再加上我们国家会限制一些国外不正常的网站，可能会存在误杀，所以，直接从pypi官网获取资源包的时候，难免会各种限速，尤其是安装大一点的资源包的时候，更凉。。。。。\n\n## 国内映像\n总有一些大佬，牛逼的人为我们指路，让我们少踩点坑。虽然官网的pypi下载速度慢，但是大佬们为了照顾我们的情绪，专门开发了国内站点，内容和官网的pypi一模一样，但是他的服务器在国内，而且速度非常快，只要我们将pip默认的下载源换成国内源，我们在pip安装时，就是从国内获取了，速度绝对杠杠的，而且包质量没问题，国内站点会隔一段时间同步一次，基本不用担心获取的包有问题，美滋滋，在这里先感谢各位大佬、大神。\n  这里呢，我们把现有的国内源贴出来，如下图所示：\n  \n\n> 这里是引用\n\n![](https://img-blog.csdnimg.cn/2020031619472466.png)\n ## 换源步骤\n（1）首先，打开c盘，找到用户这个文件夹，找到对应你自己主机的文件夹，我的是如下图所示。\n![](https://img-blog.csdnimg.cn/20200316194831891.png)\n（2）接着在文件夹下创建一个名为pip的文件夹，就像下图这样\n![](https://img-blog.csdnimg.cn/20200316194838851.png)\n（3）然后进入这个文件夹，创建一个pip.ini文件\n![](https://img-blog.csdnimg.cn/20200316194845398.png)\n（4）编辑文件，添加如下内容\n![](https://img-blog.csdnimg.cn/20200316194852623.png)\n选择哪个源链接看自己的兴趣。。。。。我这选择豆瓣\n（5）最后保存，重新打开cmd，再安装时，速度杠杠的。。。。。\n![](https://img-blog.csdnimg.cn/20200316194858861.png)\n我还有一篇博文讲的是另外一种方法也可以达到这样的效果，见：\n\n[python快速安装资源包](https://blog.csdn.net/ywsydwsbn/article/details/104896612)\n\n\n**~~希望可以帮助到大家！！！！！！！~~** ","source":"_posts/pip-change-source.md","raw":"---\ntitle: 手把手教你进行pip换源\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-12-03 20:27:39\npassword:\nsummary: 学习python，最重要的是我们需要的各样第三方资源包，没有他们学习python是寸步难行，正常情况下大家都是通过在终端输入命令行pip install xx进行安装，但是一般下载都是非常缓慢的，因此就需要自己去换源，加快资源包下载速度。\ntags: \n- python\n- pip\ncategories: \n- python\n---\n\n## 为什么要换源\n学习python，最重要的是我们需要的各样第三方资源包，比如爬虫，有`requests，xpath`，爬虫界的扛把子`Scrapy；Web有django，flask，restframework`；可视化pyQT有`PyQt5，PyQt5.QtWidgets，skimage，cv2`数据可视化届的扛把子`dlib，basemap，pyproj`，其他的比如`sys，os，datatime`等等，没有他们学习python是寸步难行，正常情况下大家都是通过在终端输入命令行`pip install xx`进行安装，但是我相信，以下这种情况大家肯定遇到过：\n\n![](https://img-blog.csdnimg.cn/20200316194419813.png)\n\n可以看到，安装资源包的过程非常的慢，可能都是几KB/s，有时甚至是一百多B/s，但是正常的网速最起码有3-5M/s，这就比较不开心了，最恶心的是，安装的慢就算了，可能安装安装着，直接error了，嗯...哭吧\n\n![](https://img-blog.csdnimg.cn/20200316194520677.png)\n\n还有一种情况是什么呢，就是这种，直接飘黄，警告，恶心吧。。。\n\n![](https://img-blog.csdnimg.cn/2020031619452719.png)\n\n***为什么会造成这种情况呢？***\n\n因为需要的获取的资源包，默认是直接从pypi官网获取的，而pypi是国外的网速就慢，再加上我们国家会限制一些国外不正常的网站，可能会存在误杀，所以，直接从pypi官网获取资源包的时候，难免会各种限速，尤其是安装大一点的资源包的时候，更凉。。。。。\n\n## 国内映像\n总有一些大佬，牛逼的人为我们指路，让我们少踩点坑。虽然官网的pypi下载速度慢，但是大佬们为了照顾我们的情绪，专门开发了国内站点，内容和官网的pypi一模一样，但是他的服务器在国内，而且速度非常快，只要我们将pip默认的下载源换成国内源，我们在pip安装时，就是从国内获取了，速度绝对杠杠的，而且包质量没问题，国内站点会隔一段时间同步一次，基本不用担心获取的包有问题，美滋滋，在这里先感谢各位大佬、大神。\n  这里呢，我们把现有的国内源贴出来，如下图所示：\n  \n\n> 这里是引用\n\n![](https://img-blog.csdnimg.cn/2020031619472466.png)\n ## 换源步骤\n（1）首先，打开c盘，找到用户这个文件夹，找到对应你自己主机的文件夹，我的是如下图所示。\n![](https://img-blog.csdnimg.cn/20200316194831891.png)\n（2）接着在文件夹下创建一个名为pip的文件夹，就像下图这样\n![](https://img-blog.csdnimg.cn/20200316194838851.png)\n（3）然后进入这个文件夹，创建一个pip.ini文件\n![](https://img-blog.csdnimg.cn/20200316194845398.png)\n（4）编辑文件，添加如下内容\n![](https://img-blog.csdnimg.cn/20200316194852623.png)\n选择哪个源链接看自己的兴趣。。。。。我这选择豆瓣\n（5）最后保存，重新打开cmd，再安装时，速度杠杠的。。。。。\n![](https://img-blog.csdnimg.cn/20200316194858861.png)\n我还有一篇博文讲的是另外一种方法也可以达到这样的效果，见：\n\n[python快速安装资源包](https://blog.csdn.net/ywsydwsbn/article/details/104896612)\n\n\n**~~希望可以帮助到大家！！！！！！！~~** ","slug":"pip-change-source","published":1,"updated":"2020-12-03T12:34:06.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki8tmm400001v8vbm5svdx2g","content":"<h2 id=\"为什么要换源\"><a href=\"#为什么要换源\" class=\"headerlink\" title=\"为什么要换源\"></a>为什么要换源</h2><p>学习python，最重要的是我们需要的各样第三方资源包，比如爬虫，有<code>requests，xpath</code>，爬虫界的扛把子<code>Scrapy；Web有django，flask，restframework</code>；可视化pyQT有<code>PyQt5，PyQt5.QtWidgets，skimage，cv2</code>数据可视化届的扛把子<code>dlib，basemap，pyproj</code>，其他的比如<code>sys，os，datatime</code>等等，没有他们学习python是寸步难行，正常情况下大家都是通过在终端输入命令行<code>pip install xx</code>进行安装，但是我相信，以下这种情况大家肯定遇到过：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200316194419813.png\" alt></p>\n<p>可以看到，安装资源包的过程非常的慢，可能都是几KB/s，有时甚至是一百多B/s，但是正常的网速最起码有3-5M/s，这就比较不开心了，最恶心的是，安装的慢就算了，可能安装安装着，直接error了，嗯…哭吧</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200316194520677.png\" alt></p>\n<p>还有一种情况是什么呢，就是这种，直接飘黄，警告，恶心吧。。。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020031619452719.png\" alt></p>\n<p><strong><em>为什么会造成这种情况呢？</em></strong></p>\n<p>因为需要的获取的资源包，默认是直接从pypi官网获取的，而pypi是国外的网速就慢，再加上我们国家会限制一些国外不正常的网站，可能会存在误杀，所以，直接从pypi官网获取资源包的时候，难免会各种限速，尤其是安装大一点的资源包的时候，更凉。。。。。</p>\n<h2 id=\"国内映像\"><a href=\"#国内映像\" class=\"headerlink\" title=\"国内映像\"></a>国内映像</h2><p>总有一些大佬，牛逼的人为我们指路，让我们少踩点坑。虽然官网的pypi下载速度慢，但是大佬们为了照顾我们的情绪，专门开发了国内站点，内容和官网的pypi一模一样，但是他的服务器在国内，而且速度非常快，只要我们将pip默认的下载源换成国内源，我们在pip安装时，就是从国内获取了，速度绝对杠杠的，而且包质量没问题，国内站点会隔一段时间同步一次，基本不用担心获取的包有问题，美滋滋，在这里先感谢各位大佬、大神。<br>  这里呢，我们把现有的国内源贴出来，如下图所示：</p>\n<blockquote>\n<p>这里是引用</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/2020031619472466.png\" alt></p>\n<h2 id=\"换源步骤\"><a href=\"#换源步骤\" class=\"headerlink\" title=\"换源步骤\"></a>换源步骤</h2><p>（1）首先，打开c盘，找到用户这个文件夹，找到对应你自己主机的文件夹，我的是如下图所示。<br><img src=\"https://img-blog.csdnimg.cn/20200316194831891.png\" alt><br>（2）接着在文件夹下创建一个名为pip的文件夹，就像下图这样<br><img src=\"https://img-blog.csdnimg.cn/20200316194838851.png\" alt><br>（3）然后进入这个文件夹，创建一个pip.ini文件<br><img src=\"https://img-blog.csdnimg.cn/20200316194845398.png\" alt><br>（4）编辑文件，添加如下内容<br><img src=\"https://img-blog.csdnimg.cn/20200316194852623.png\" alt><br>选择哪个源链接看自己的兴趣。。。。。我这选择豆瓣<br>（5）最后保存，重新打开cmd，再安装时，速度杠杠的。。。。。<br><img src=\"https://img-blog.csdnimg.cn/20200316194858861.png\" alt><br>我还有一篇博文讲的是另外一种方法也可以达到这样的效果，见：</p>\n<p><a href=\"https://blog.csdn.net/ywsydwsbn/article/details/104896612\" target=\"_blank\" rel=\"noopener\">python快速安装资源包</a></p>\n<p><strong><del>希望可以帮助到大家！！！！！！！</del></strong> </p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"为什么要换源\"><a href=\"#为什么要换源\" class=\"headerlink\" title=\"为什么要换源\"></a>为什么要换源</h2><p>学习python，最重要的是我们需要的各样第三方资源包，比如爬虫，有<code>requests，xpath</code>，爬虫界的扛把子<code>Scrapy；Web有django，flask，restframework</code>；可视化pyQT有<code>PyQt5，PyQt5.QtWidgets，skimage，cv2</code>数据可视化届的扛把子<code>dlib，basemap，pyproj</code>，其他的比如<code>sys，os，datatime</code>等等，没有他们学习python是寸步难行，正常情况下大家都是通过在终端输入命令行<code>pip install xx</code>进行安装，但是我相信，以下这种情况大家肯定遇到过：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200316194419813.png\" alt></p>\n<p>可以看到，安装资源包的过程非常的慢，可能都是几KB/s，有时甚至是一百多B/s，但是正常的网速最起码有3-5M/s，这就比较不开心了，最恶心的是，安装的慢就算了，可能安装安装着，直接error了，嗯…哭吧</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200316194520677.png\" alt></p>\n<p>还有一种情况是什么呢，就是这种，直接飘黄，警告，恶心吧。。。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2020031619452719.png\" alt></p>\n<p><strong><em>为什么会造成这种情况呢？</em></strong></p>\n<p>因为需要的获取的资源包，默认是直接从pypi官网获取的，而pypi是国外的网速就慢，再加上我们国家会限制一些国外不正常的网站，可能会存在误杀，所以，直接从pypi官网获取资源包的时候，难免会各种限速，尤其是安装大一点的资源包的时候，更凉。。。。。</p>\n<h2 id=\"国内映像\"><a href=\"#国内映像\" class=\"headerlink\" title=\"国内映像\"></a>国内映像</h2><p>总有一些大佬，牛逼的人为我们指路，让我们少踩点坑。虽然官网的pypi下载速度慢，但是大佬们为了照顾我们的情绪，专门开发了国内站点，内容和官网的pypi一模一样，但是他的服务器在国内，而且速度非常快，只要我们将pip默认的下载源换成国内源，我们在pip安装时，就是从国内获取了，速度绝对杠杠的，而且包质量没问题，国内站点会隔一段时间同步一次，基本不用担心获取的包有问题，美滋滋，在这里先感谢各位大佬、大神。<br>  这里呢，我们把现有的国内源贴出来，如下图所示：</p>\n<blockquote>\n<p>这里是引用</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/2020031619472466.png\" alt></p>\n<h2 id=\"换源步骤\"><a href=\"#换源步骤\" class=\"headerlink\" title=\"换源步骤\"></a>换源步骤</h2><p>（1）首先，打开c盘，找到用户这个文件夹，找到对应你自己主机的文件夹，我的是如下图所示。<br><img src=\"https://img-blog.csdnimg.cn/20200316194831891.png\" alt><br>（2）接着在文件夹下创建一个名为pip的文件夹，就像下图这样<br><img src=\"https://img-blog.csdnimg.cn/20200316194838851.png\" alt><br>（3）然后进入这个文件夹，创建一个pip.ini文件<br><img src=\"https://img-blog.csdnimg.cn/20200316194845398.png\" alt><br>（4）编辑文件，添加如下内容<br><img src=\"https://img-blog.csdnimg.cn/20200316194852623.png\" alt><br>选择哪个源链接看自己的兴趣。。。。。我这选择豆瓣<br>（5）最后保存，重新打开cmd，再安装时，速度杠杠的。。。。。<br><img src=\"https://img-blog.csdnimg.cn/20200316194858861.png\" alt><br>我还有一篇博文讲的是另外一种方法也可以达到这样的效果，见：</p>\n<p><a href=\"https://blog.csdn.net/ywsydwsbn/article/details/104896612\" target=\"_blank\" rel=\"noopener\">python快速安装资源包</a></p>\n<p><strong><del>希望可以帮助到大家！！！！！！！</del></strong> </p>\n"},{"title":"Python实现树莓派摄像头持续录像并传送到主机","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-12-03T07:40:22.000Z","password":null,"summary":"关于树莓派，想必从事嵌入式开发的开发者都有听过，树莓派原名为Raspberry Pi，此博文教你如何利用Python实现树莓派摄像头持续录像并传送到主机。","_content":"\n关于树莓派，想必从事嵌入式开发的开发者都有听过，树莓派原名为`Raspberry Pi`，也就是它的英文读法，树莓派诞生于英国，由“Raspberry Pi 基金会”这个慈善组织注册开发。埃•厄普顿就是该项目的头目。在2012年的3月，英国剑桥大学埃本•阿普顿（Eben Epton）正式发售世界上最小的台式机，又称卡片式电脑，外形只有信用卡大小，却具有电脑的所有基本功能，这就是Raspberry Pi电脑板，中文译名”树莓派”！\n\n树莓派作为一个轻便迷你的小终端很受大众的喜爱！！！\n![树莓派](https://img-blog.csdnimg.cn/20200330190903552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70)\n\n# 树莓派的特点\n\n与常见的51单片机和STM32等这类的嵌入式微控制器相比，不仅可以完成相同的IO引脚控制之外，还能运行有相应的操作系统，可以完成更复杂的任务管理与调度，能够支持更上层应用的开发，为了开发者提供了更广阔的应用空间。比如开发语言的选择不仅仅只限于C语言，连接底层硬件与上层应用，可以实现物联网的云控制和云管理，也可以忽略树莓派的IO控制，使用树莓派搭建小型的网络服务器，做一些小型的测试开发和服务。\n\n与一般的PC计算机平台相比，树莓派可以提供的IO引脚，能够直接控制其他底层硬件的功能，这是一般PC计算机做不到的，当然，树莓派体积小，成本低，照常可以完成一些PC任务与应用。\n\n树莓派自带的摄像头拍摄夜空是有先例的，起码可以做到延时摄影。对于实时拍摄没有研究，但是仍然有必要测试。\n树莓派自带的摄像头是500万像素，价格在26-29欧元（人民币200+左右）\n\n# 实时还是事后采集记录结果？\n树莓派上的摄像机，是使用一个`raspivid`命令操作的。 抛开这个命令的其他参数，其**输出数据有2种方式**：\n\n - 将数据保存成文件，储存在SD卡上，以便事后读取;\n - 将数据按照字节流的形式，直接输出到STDOUT标准输出中，可以实时获取。\n\n选择哪种方式，首先要考虑我们能否具有足够的采集数据的能力。\n\n`raspivid`命令可以调节相机模块的输出比特率。输出是以`H264`编码输出的，比特率一般默认是17Mbps，但是这个数字可以调小。 如果按照17Mbps算，就是一秒钟2.12兆字节。 我们记录数据或者获取数据的速度不能低于这个值，否则长时间录像可能造成树莓派的缓存充满，导致树莓派崩溃。\n\n树莓派的网卡是使用了其USB总线，传送速度是100Mb/s或者12.5MB/s。 实际上后文的实验表明，目前能达到的传送速度只有**3MB/s（TCP）** 或者 **6MB/s（UDP）**。\n\n如果使用SD卡存储，这个记录速度也是可以达到的，但是，SD卡有写入寿命，这是要考虑的。 例如，对于32GB的卡，即使我们能利用全部存储空间，以2MB/s的速度录像，也只能记录4.55小时。\n\n# 如何通过网络实时传送数据？\n`raspivid`命令的`-o`选项，就是用来指定输出文件的。 在`Linux`系统中，输出到文件并不等于写入到磁盘（这里是SD卡）。 我们仍然可能使用`RAMDisk`这种技术，让输出只是暂时存储在内存中，并稍后读取，然后删除之。 但是，树莓派的可用内存可能只有280MB，这最多只能记录差不多2分钟的视频。\n\n如果我们有文件形式的摄像记录，那么就似乎可以使用文件传输的协议，例如`sftp, scp`等等登录到树莓派下载文件了。 然而这是不对的。这些协议在传输中使用了加密。\n\n树莓派在向我们的电脑进行数据传送的时候，如果用这些协议，就必须先对发送的数据进行加密。 在互联网上，加密是很好的设计。但是在树莓派和电脑之间只用一根网线连接的时候，就不是了。 树莓派的运算能力是很有限的，使用加密只会让传送速度变慢，所以，不要使用加密！\n\n我们使用最原始而简单的方法：**使用netcat命令**，在笔记本电脑这一端监听数据输入。 在树莓派这一端，我们让raspivid获取一定周期（比如10分钟，也许可以更长）的录像， 将结果设定为直接输出，然后利用Linux的管道机制，直接送进netcat发送。\n\n# 配置由树莓派和笔记本构成的网络\n树莓派和笔记本电脑之间的连接，使用普通网线即可， 因为笔记本和树莓派上的网卡都能自动适应网线，设定正确的模式（正常来说要使用交叉网线）。\n\n重要的一步是，笔记本电脑和树莓派连接后构成的网络中，需要手动为两个设备设定IP地址。 对于笔记本电脑的设定，就比较简单了。 我们将笔记本电脑和树莓派相连的网卡上，将电脑的**IP地址设定为`xxx.xxx.x.xxx`，子网掩码为`255.255.255.0`，网关不要填**。\n\n配置树莓派的方法是，先将树莓派断电，然后取出所用的SD卡，用读卡器插回电脑。 在SD卡的`boot分区`中，有个`cmdline.txt`，这是树莓派开机时所用到的一些参数。\n\n打开这个文件，会发现里面只有一行。这一行中用空格分开了很多设定参数。 我们在这一行的结尾，不添加空行，直接加上空格，然后写上：`ip=xxx.xxx.x.xxx`\n\n当然如果这一行里面已经有了ip=的参数，应该直接修改它。\n\n这样的结果就是，树莓派开机之后，会自己选择这个IP地址作为自己的地址。 \n\n# 实现在笔记本上监听输入\n`netcat命令`，在每收到一个文件的`EOF`（End Of File，表明文件已经到结尾），就会退出。 我们为了让接收能够连续进行，需要用脚本连续运行这个命令。 这样就会为每个新接收到的视频，在笔记本电脑这一端建立一个文件用来存储。\n\n```python\n# -*- coding: utf-8 -*-\n\nimport os\nimport signal\nimport subprocess\nimport sys\nimport uuid\n\n# 获取程序运行的本地目录，和用来存储接收结果的recv文件夹目录\n\nBASEPATH = os.path.realpath(os.path.dirname(sys.argv[0]))\nRECV = os.path.join(BASEPATH, 'recv')\n\n# 如果接收目录不存在，就自动新建\n\nprint \" *** Received files are put into: %s\" % RECV\nif not os.path.isdir(RECV):\n    os.system('mkdir -p %s' % RECV)\n\n# 下面的部分用来记录正在等待接收的文件。这个文件会以一个UUID.tmp的格式命名。\n# 在接收成功后，就会被重命名为UUID。（UUID是一个特定格式的唯一字符串，不会重复）。\n# 如果在接收过程中按下Ctrl+C，就会发送一个终止命令给程序，这样程序会退出，\n# 并删除没有接收完整的那个文件。\n\nworking = False\nfullname = False\n\ndef sigint_handler(signum, frame):\n    global fullname, working\n    print \"\\n\"\n    print \" *** SIGINT detected. End the program.\"\n    if working and fullname != False:\n        print \" *** Unfinished recording deleted.\"\n        os.system('rm -f %s.tmp' % fullname)\n    exit()\nsignal.signal(signal.SIGINT, sigint_handler)\n\n# 使用一个死循环来不断运行netcat(nc)命令。\n\nn = 1\nwhile True:\n    recname = str(uuid.uuid1())\n    print \" [%8d] Listening for file [%s]. Use Ctrl+C to stop this script.\" % (n, recname)\n    fullname = os.path.join(RECV, recname)\n\n    working = True # 标记接收开始\n    # 使用 nc -lp 10401 命令接收数据，表明端口为10401。\n    subprocess.call('nc -lp 10401 > %s.tmp' % fullname, shell=True)\n    os.system('mv %s.tmp %s' % (fullname, fullname))\n    working = False # 标记接收完毕\n\n    n += 1\n```\n上文所述的脚本，在笔记本上运行之后，就会在本地开启10401端口，等待树莓派上传送的文件。 传送的会直接写入一个由UUID（全局唯一ID）标识的文件中，可以供以后处理。\n\n# 在树莓派上摄像并发送摄像结果\n在树莓派上命令拍摄的方法是：\n\n```powershell\n$ raspivid -o - -b 16000000 -t 100000 | nc xxx.xxx.x.xxx 10401\n```\n\n**这条指令的意义如下**：\n\n - -o -，使用-o设定输出，-表示直接输出到标准输出中，不写入文件。\n - -b 16000000，设定输出比特率为16000000 bit/s。这大约是2兆字节每秒。\n - -t 100000，设定录像时间为100000毫秒，亦即100秒。\n - | nc xxx.xxx.x.xxx 10401，使用管道|将结果导入到nc中，nc是发送模式，目标是xxx.xxx.x.xxx计算机上的10401端口。\n","source":"_posts/Raspberry-Pi-camera.md","raw":"---\ntitle: Python实现树莓派摄像头持续录像并传送到主机\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-12-03 15:40:22\npassword:\nsummary: 关于树莓派，想必从事嵌入式开发的开发者都有听过，树莓派原名为Raspberry Pi，此博文教你如何利用Python实现树莓派摄像头持续录像并传送到主机。\ntags: \n- python\n- Raspberry Pi\n- 网络\ncategories: \n- python\n---\n\n关于树莓派，想必从事嵌入式开发的开发者都有听过，树莓派原名为`Raspberry Pi`，也就是它的英文读法，树莓派诞生于英国，由“Raspberry Pi 基金会”这个慈善组织注册开发。埃•厄普顿就是该项目的头目。在2012年的3月，英国剑桥大学埃本•阿普顿（Eben Epton）正式发售世界上最小的台式机，又称卡片式电脑，外形只有信用卡大小，却具有电脑的所有基本功能，这就是Raspberry Pi电脑板，中文译名”树莓派”！\n\n树莓派作为一个轻便迷你的小终端很受大众的喜爱！！！\n![树莓派](https://img-blog.csdnimg.cn/20200330190903552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70)\n\n# 树莓派的特点\n\n与常见的51单片机和STM32等这类的嵌入式微控制器相比，不仅可以完成相同的IO引脚控制之外，还能运行有相应的操作系统，可以完成更复杂的任务管理与调度，能够支持更上层应用的开发，为了开发者提供了更广阔的应用空间。比如开发语言的选择不仅仅只限于C语言，连接底层硬件与上层应用，可以实现物联网的云控制和云管理，也可以忽略树莓派的IO控制，使用树莓派搭建小型的网络服务器，做一些小型的测试开发和服务。\n\n与一般的PC计算机平台相比，树莓派可以提供的IO引脚，能够直接控制其他底层硬件的功能，这是一般PC计算机做不到的，当然，树莓派体积小，成本低，照常可以完成一些PC任务与应用。\n\n树莓派自带的摄像头拍摄夜空是有先例的，起码可以做到延时摄影。对于实时拍摄没有研究，但是仍然有必要测试。\n树莓派自带的摄像头是500万像素，价格在26-29欧元（人民币200+左右）\n\n# 实时还是事后采集记录结果？\n树莓派上的摄像机，是使用一个`raspivid`命令操作的。 抛开这个命令的其他参数，其**输出数据有2种方式**：\n\n - 将数据保存成文件，储存在SD卡上，以便事后读取;\n - 将数据按照字节流的形式，直接输出到STDOUT标准输出中，可以实时获取。\n\n选择哪种方式，首先要考虑我们能否具有足够的采集数据的能力。\n\n`raspivid`命令可以调节相机模块的输出比特率。输出是以`H264`编码输出的，比特率一般默认是17Mbps，但是这个数字可以调小。 如果按照17Mbps算，就是一秒钟2.12兆字节。 我们记录数据或者获取数据的速度不能低于这个值，否则长时间录像可能造成树莓派的缓存充满，导致树莓派崩溃。\n\n树莓派的网卡是使用了其USB总线，传送速度是100Mb/s或者12.5MB/s。 实际上后文的实验表明，目前能达到的传送速度只有**3MB/s（TCP）** 或者 **6MB/s（UDP）**。\n\n如果使用SD卡存储，这个记录速度也是可以达到的，但是，SD卡有写入寿命，这是要考虑的。 例如，对于32GB的卡，即使我们能利用全部存储空间，以2MB/s的速度录像，也只能记录4.55小时。\n\n# 如何通过网络实时传送数据？\n`raspivid`命令的`-o`选项，就是用来指定输出文件的。 在`Linux`系统中，输出到文件并不等于写入到磁盘（这里是SD卡）。 我们仍然可能使用`RAMDisk`这种技术，让输出只是暂时存储在内存中，并稍后读取，然后删除之。 但是，树莓派的可用内存可能只有280MB，这最多只能记录差不多2分钟的视频。\n\n如果我们有文件形式的摄像记录，那么就似乎可以使用文件传输的协议，例如`sftp, scp`等等登录到树莓派下载文件了。 然而这是不对的。这些协议在传输中使用了加密。\n\n树莓派在向我们的电脑进行数据传送的时候，如果用这些协议，就必须先对发送的数据进行加密。 在互联网上，加密是很好的设计。但是在树莓派和电脑之间只用一根网线连接的时候，就不是了。 树莓派的运算能力是很有限的，使用加密只会让传送速度变慢，所以，不要使用加密！\n\n我们使用最原始而简单的方法：**使用netcat命令**，在笔记本电脑这一端监听数据输入。 在树莓派这一端，我们让raspivid获取一定周期（比如10分钟，也许可以更长）的录像， 将结果设定为直接输出，然后利用Linux的管道机制，直接送进netcat发送。\n\n# 配置由树莓派和笔记本构成的网络\n树莓派和笔记本电脑之间的连接，使用普通网线即可， 因为笔记本和树莓派上的网卡都能自动适应网线，设定正确的模式（正常来说要使用交叉网线）。\n\n重要的一步是，笔记本电脑和树莓派连接后构成的网络中，需要手动为两个设备设定IP地址。 对于笔记本电脑的设定，就比较简单了。 我们将笔记本电脑和树莓派相连的网卡上，将电脑的**IP地址设定为`xxx.xxx.x.xxx`，子网掩码为`255.255.255.0`，网关不要填**。\n\n配置树莓派的方法是，先将树莓派断电，然后取出所用的SD卡，用读卡器插回电脑。 在SD卡的`boot分区`中，有个`cmdline.txt`，这是树莓派开机时所用到的一些参数。\n\n打开这个文件，会发现里面只有一行。这一行中用空格分开了很多设定参数。 我们在这一行的结尾，不添加空行，直接加上空格，然后写上：`ip=xxx.xxx.x.xxx`\n\n当然如果这一行里面已经有了ip=的参数，应该直接修改它。\n\n这样的结果就是，树莓派开机之后，会自己选择这个IP地址作为自己的地址。 \n\n# 实现在笔记本上监听输入\n`netcat命令`，在每收到一个文件的`EOF`（End Of File，表明文件已经到结尾），就会退出。 我们为了让接收能够连续进行，需要用脚本连续运行这个命令。 这样就会为每个新接收到的视频，在笔记本电脑这一端建立一个文件用来存储。\n\n```python\n# -*- coding: utf-8 -*-\n\nimport os\nimport signal\nimport subprocess\nimport sys\nimport uuid\n\n# 获取程序运行的本地目录，和用来存储接收结果的recv文件夹目录\n\nBASEPATH = os.path.realpath(os.path.dirname(sys.argv[0]))\nRECV = os.path.join(BASEPATH, 'recv')\n\n# 如果接收目录不存在，就自动新建\n\nprint \" *** Received files are put into: %s\" % RECV\nif not os.path.isdir(RECV):\n    os.system('mkdir -p %s' % RECV)\n\n# 下面的部分用来记录正在等待接收的文件。这个文件会以一个UUID.tmp的格式命名。\n# 在接收成功后，就会被重命名为UUID。（UUID是一个特定格式的唯一字符串，不会重复）。\n# 如果在接收过程中按下Ctrl+C，就会发送一个终止命令给程序，这样程序会退出，\n# 并删除没有接收完整的那个文件。\n\nworking = False\nfullname = False\n\ndef sigint_handler(signum, frame):\n    global fullname, working\n    print \"\\n\"\n    print \" *** SIGINT detected. End the program.\"\n    if working and fullname != False:\n        print \" *** Unfinished recording deleted.\"\n        os.system('rm -f %s.tmp' % fullname)\n    exit()\nsignal.signal(signal.SIGINT, sigint_handler)\n\n# 使用一个死循环来不断运行netcat(nc)命令。\n\nn = 1\nwhile True:\n    recname = str(uuid.uuid1())\n    print \" [%8d] Listening for file [%s]. Use Ctrl+C to stop this script.\" % (n, recname)\n    fullname = os.path.join(RECV, recname)\n\n    working = True # 标记接收开始\n    # 使用 nc -lp 10401 命令接收数据，表明端口为10401。\n    subprocess.call('nc -lp 10401 > %s.tmp' % fullname, shell=True)\n    os.system('mv %s.tmp %s' % (fullname, fullname))\n    working = False # 标记接收完毕\n\n    n += 1\n```\n上文所述的脚本，在笔记本上运行之后，就会在本地开启10401端口，等待树莓派上传送的文件。 传送的会直接写入一个由UUID（全局唯一ID）标识的文件中，可以供以后处理。\n\n# 在树莓派上摄像并发送摄像结果\n在树莓派上命令拍摄的方法是：\n\n```powershell\n$ raspivid -o - -b 16000000 -t 100000 | nc xxx.xxx.x.xxx 10401\n```\n\n**这条指令的意义如下**：\n\n - -o -，使用-o设定输出，-表示直接输出到标准输出中，不写入文件。\n - -b 16000000，设定输出比特率为16000000 bit/s。这大约是2兆字节每秒。\n - -t 100000，设定录像时间为100000毫秒，亦即100秒。\n - | nc xxx.xxx.x.xxx 10401，使用管道|将结果导入到nc中，nc是发送模式，目标是xxx.xxx.x.xxx计算机上的10401端口。\n","slug":"Raspberry-Pi-camera","published":1,"updated":"2020-12-03T07:47:09.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki8tmm460003v8vbw56424k9","content":"<p>关于树莓派，想必从事嵌入式开发的开发者都有听过，树莓派原名为<code>Raspberry Pi</code>，也就是它的英文读法，树莓派诞生于英国，由“Raspberry Pi 基金会”这个慈善组织注册开发。埃•厄普顿就是该项目的头目。在2012年的3月，英国剑桥大学埃本•阿普顿（Eben Epton）正式发售世界上最小的台式机，又称卡片式电脑，外形只有信用卡大小，却具有电脑的所有基本功能，这就是Raspberry Pi电脑板，中文译名”树莓派”！</p>\n<p>树莓派作为一个轻便迷你的小终端很受大众的喜爱！！！<br><img src=\"https://img-blog.csdnimg.cn/20200330190903552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70\" alt=\"树莓派\"></p>\n<h1 id=\"树莓派的特点\"><a href=\"#树莓派的特点\" class=\"headerlink\" title=\"树莓派的特点\"></a>树莓派的特点</h1><p>与常见的51单片机和STM32等这类的嵌入式微控制器相比，不仅可以完成相同的IO引脚控制之外，还能运行有相应的操作系统，可以完成更复杂的任务管理与调度，能够支持更上层应用的开发，为了开发者提供了更广阔的应用空间。比如开发语言的选择不仅仅只限于C语言，连接底层硬件与上层应用，可以实现物联网的云控制和云管理，也可以忽略树莓派的IO控制，使用树莓派搭建小型的网络服务器，做一些小型的测试开发和服务。</p>\n<p>与一般的PC计算机平台相比，树莓派可以提供的IO引脚，能够直接控制其他底层硬件的功能，这是一般PC计算机做不到的，当然，树莓派体积小，成本低，照常可以完成一些PC任务与应用。</p>\n<p>树莓派自带的摄像头拍摄夜空是有先例的，起码可以做到延时摄影。对于实时拍摄没有研究，但是仍然有必要测试。<br>树莓派自带的摄像头是500万像素，价格在26-29欧元（人民币200+左右）</p>\n<h1 id=\"实时还是事后采集记录结果？\"><a href=\"#实时还是事后采集记录结果？\" class=\"headerlink\" title=\"实时还是事后采集记录结果？\"></a>实时还是事后采集记录结果？</h1><p>树莓派上的摄像机，是使用一个<code>raspivid</code>命令操作的。 抛开这个命令的其他参数，其<strong>输出数据有2种方式</strong>：</p>\n<ul>\n<li>将数据保存成文件，储存在SD卡上，以便事后读取;</li>\n<li>将数据按照字节流的形式，直接输出到STDOUT标准输出中，可以实时获取。</li>\n</ul>\n<p>选择哪种方式，首先要考虑我们能否具有足够的采集数据的能力。</p>\n<p><code>raspivid</code>命令可以调节相机模块的输出比特率。输出是以<code>H264</code>编码输出的，比特率一般默认是17Mbps，但是这个数字可以调小。 如果按照17Mbps算，就是一秒钟2.12兆字节。 我们记录数据或者获取数据的速度不能低于这个值，否则长时间录像可能造成树莓派的缓存充满，导致树莓派崩溃。</p>\n<p>树莓派的网卡是使用了其USB总线，传送速度是100Mb/s或者12.5MB/s。 实际上后文的实验表明，目前能达到的传送速度只有<strong>3MB/s（TCP）</strong> 或者 <strong>6MB/s（UDP）</strong>。</p>\n<p>如果使用SD卡存储，这个记录速度也是可以达到的，但是，SD卡有写入寿命，这是要考虑的。 例如，对于32GB的卡，即使我们能利用全部存储空间，以2MB/s的速度录像，也只能记录4.55小时。</p>\n<h1 id=\"如何通过网络实时传送数据？\"><a href=\"#如何通过网络实时传送数据？\" class=\"headerlink\" title=\"如何通过网络实时传送数据？\"></a>如何通过网络实时传送数据？</h1><p><code>raspivid</code>命令的<code>-o</code>选项，就是用来指定输出文件的。 在<code>Linux</code>系统中，输出到文件并不等于写入到磁盘（这里是SD卡）。 我们仍然可能使用<code>RAMDisk</code>这种技术，让输出只是暂时存储在内存中，并稍后读取，然后删除之。 但是，树莓派的可用内存可能只有280MB，这最多只能记录差不多2分钟的视频。</p>\n<p>如果我们有文件形式的摄像记录，那么就似乎可以使用文件传输的协议，例如<code>sftp, scp</code>等等登录到树莓派下载文件了。 然而这是不对的。这些协议在传输中使用了加密。</p>\n<p>树莓派在向我们的电脑进行数据传送的时候，如果用这些协议，就必须先对发送的数据进行加密。 在互联网上，加密是很好的设计。但是在树莓派和电脑之间只用一根网线连接的时候，就不是了。 树莓派的运算能力是很有限的，使用加密只会让传送速度变慢，所以，不要使用加密！</p>\n<p>我们使用最原始而简单的方法：<strong>使用netcat命令</strong>，在笔记本电脑这一端监听数据输入。 在树莓派这一端，我们让raspivid获取一定周期（比如10分钟，也许可以更长）的录像， 将结果设定为直接输出，然后利用Linux的管道机制，直接送进netcat发送。</p>\n<h1 id=\"配置由树莓派和笔记本构成的网络\"><a href=\"#配置由树莓派和笔记本构成的网络\" class=\"headerlink\" title=\"配置由树莓派和笔记本构成的网络\"></a>配置由树莓派和笔记本构成的网络</h1><p>树莓派和笔记本电脑之间的连接，使用普通网线即可， 因为笔记本和树莓派上的网卡都能自动适应网线，设定正确的模式（正常来说要使用交叉网线）。</p>\n<p>重要的一步是，笔记本电脑和树莓派连接后构成的网络中，需要手动为两个设备设定IP地址。 对于笔记本电脑的设定，就比较简单了。 我们将笔记本电脑和树莓派相连的网卡上，将电脑的<strong>IP地址设定为<code>xxx.xxx.x.xxx</code>，子网掩码为<code>255.255.255.0</code>，网关不要填</strong>。</p>\n<p>配置树莓派的方法是，先将树莓派断电，然后取出所用的SD卡，用读卡器插回电脑。 在SD卡的<code>boot分区</code>中，有个<code>cmdline.txt</code>，这是树莓派开机时所用到的一些参数。</p>\n<p>打开这个文件，会发现里面只有一行。这一行中用空格分开了很多设定参数。 我们在这一行的结尾，不添加空行，直接加上空格，然后写上：<code>ip=xxx.xxx.x.xxx</code></p>\n<p>当然如果这一行里面已经有了ip=的参数，应该直接修改它。</p>\n<p>这样的结果就是，树莓派开机之后，会自己选择这个IP地址作为自己的地址。 </p>\n<h1 id=\"实现在笔记本上监听输入\"><a href=\"#实现在笔记本上监听输入\" class=\"headerlink\" title=\"实现在笔记本上监听输入\"></a>实现在笔记本上监听输入</h1><p><code>netcat命令</code>，在每收到一个文件的<code>EOF</code>（End Of File，表明文件已经到结尾），就会退出。 我们为了让接收能够连续进行，需要用脚本连续运行这个命令。 这样就会为每个新接收到的视频，在笔记本电脑这一端建立一个文件用来存储。</p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># -*- coding: utf-8 -*-</span>\n\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> signal\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> uuid\n\n<span class=\"token comment\" spellcheck=\"true\"># 获取程序运行的本地目录，和用来存储接收结果的recv文件夹目录</span>\n\nBASEPATH <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>realpath<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nRECV <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASEPATH<span class=\"token punctuation\">,</span> <span class=\"token string\">'recv'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 如果接收目录不存在，就自动新建</span>\n\n<span class=\"token keyword\">print</span> <span class=\"token string\">\" *** Received files are put into: %s\"</span> <span class=\"token operator\">%</span> RECV\n<span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isdir<span class=\"token punctuation\">(</span>RECV<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'mkdir -p %s'</span> <span class=\"token operator\">%</span> RECV<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 下面的部分用来记录正在等待接收的文件。这个文件会以一个UUID.tmp的格式命名。</span>\n<span class=\"token comment\" spellcheck=\"true\"># 在接收成功后，就会被重命名为UUID。（UUID是一个特定格式的唯一字符串，不会重复）。</span>\n<span class=\"token comment\" spellcheck=\"true\"># 如果在接收过程中按下Ctrl+C，就会发送一个终止命令给程序，这样程序会退出，</span>\n<span class=\"token comment\" spellcheck=\"true\"># 并删除没有接收完整的那个文件。</span>\n\nworking <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\nfullname <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sigint_handler</span><span class=\"token punctuation\">(</span>signum<span class=\"token punctuation\">,</span> frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> fullname<span class=\"token punctuation\">,</span> working\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\"\\n\"</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\" *** SIGINT detected. End the program.\"</span>\n    <span class=\"token keyword\">if</span> working <span class=\"token operator\">and</span> fullname <span class=\"token operator\">!=</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">\" *** Unfinished recording deleted.\"</span>\n        os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'rm -f %s.tmp'</span> <span class=\"token operator\">%</span> fullname<span class=\"token punctuation\">)</span>\n    exit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsignal<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span>SIGINT<span class=\"token punctuation\">,</span> sigint_handler<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 使用一个死循环来不断运行netcat(nc)命令。</span>\n\nn <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    recname <span class=\"token operator\">=</span> str<span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">.</span>uuid1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">\" [%8d] Listening for file [%s]. Use Ctrl+C to stop this script.\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> recname<span class=\"token punctuation\">)</span>\n    fullname <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>RECV<span class=\"token punctuation\">,</span> recname<span class=\"token punctuation\">)</span>\n\n    working <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span> <span class=\"token comment\" spellcheck=\"true\"># 标记接收开始</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 使用 nc -lp 10401 命令接收数据，表明端口为10401。</span>\n    subprocess<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span><span class=\"token string\">'nc -lp 10401 > %s.tmp'</span> <span class=\"token operator\">%</span> fullname<span class=\"token punctuation\">,</span> shell<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token string\">'mv %s.tmp %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>fullname<span class=\"token punctuation\">,</span> fullname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    working <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span> <span class=\"token comment\" spellcheck=\"true\"># 标记接收完毕</span>\n\n    n <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上文所述的脚本，在笔记本上运行之后，就会在本地开启10401端口，等待树莓派上传送的文件。 传送的会直接写入一个由UUID（全局唯一ID）标识的文件中，可以供以后处理。</p>\n<h1 id=\"在树莓派上摄像并发送摄像结果\"><a href=\"#在树莓派上摄像并发送摄像结果\" class=\"headerlink\" title=\"在树莓派上摄像并发送摄像结果\"></a>在树莓派上摄像并发送摄像结果</h1><p>在树莓派上命令拍摄的方法是：</p>\n<pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">$ raspivid <span class=\"token operator\">-</span>o <span class=\"token operator\">-</span> <span class=\"token operator\">-</span>b 16000000 <span class=\"token operator\">-</span>t 100000 <span class=\"token punctuation\">|</span> nc xxx<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span>xxx 10401<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>这条指令的意义如下</strong>：</p>\n<ul>\n<li>-o -，使用-o设定输出，-表示直接输出到标准输出中，不写入文件。</li>\n<li>-b 16000000，设定输出比特率为16000000 bit/s。这大约是2兆字节每秒。</li>\n<li>-t 100000，设定录像时间为100000毫秒，亦即100秒。</li>\n<li>| nc xxx.xxx.x.xxx 10401，使用管道|将结果导入到nc中，nc是发送模式，目标是xxx.xxx.x.xxx计算机上的10401端口。</li>\n</ul>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p>关于树莓派，想必从事嵌入式开发的开发者都有听过，树莓派原名为<code>Raspberry Pi</code>，也就是它的英文读法，树莓派诞生于英国，由“Raspberry Pi 基金会”这个慈善组织注册开发。埃•厄普顿就是该项目的头目。在2012年的3月，英国剑桥大学埃本•阿普顿（Eben Epton）正式发售世界上最小的台式机，又称卡片式电脑，外形只有信用卡大小，却具有电脑的所有基本功能，这就是Raspberry Pi电脑板，中文译名”树莓派”！</p>\n<p>树莓派作为一个轻便迷你的小终端很受大众的喜爱！！！<br><img src=\"https://img-blog.csdnimg.cn/20200330190903552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70\" alt=\"树莓派\"></p>\n<h1 id=\"树莓派的特点\"><a href=\"#树莓派的特点\" class=\"headerlink\" title=\"树莓派的特点\"></a>树莓派的特点</h1><p>与常见的51单片机和STM32等这类的嵌入式微控制器相比，不仅可以完成相同的IO引脚控制之外，还能运行有相应的操作系统，可以完成更复杂的任务管理与调度，能够支持更上层应用的开发，为了开发者提供了更广阔的应用空间。比如开发语言的选择不仅仅只限于C语言，连接底层硬件与上层应用，可以实现物联网的云控制和云管理，也可以忽略树莓派的IO控制，使用树莓派搭建小型的网络服务器，做一些小型的测试开发和服务。</p>\n<p>与一般的PC计算机平台相比，树莓派可以提供的IO引脚，能够直接控制其他底层硬件的功能，这是一般PC计算机做不到的，当然，树莓派体积小，成本低，照常可以完成一些PC任务与应用。</p>\n<p>树莓派自带的摄像头拍摄夜空是有先例的，起码可以做到延时摄影。对于实时拍摄没有研究，但是仍然有必要测试。<br>树莓派自带的摄像头是500万像素，价格在26-29欧元（人民币200+左右）</p>\n<h1 id=\"实时还是事后采集记录结果？\"><a href=\"#实时还是事后采集记录结果？\" class=\"headerlink\" title=\"实时还是事后采集记录结果？\"></a>实时还是事后采集记录结果？</h1><p>树莓派上的摄像机，是使用一个<code>raspivid</code>命令操作的。 抛开这个命令的其他参数，其<strong>输出数据有2种方式</strong>：</p>\n<ul>\n<li>将数据保存成文件，储存在SD卡上，以便事后读取;</li>\n<li>将数据按照字节流的形式，直接输出到STDOUT标准输出中，可以实时获取。</li>\n</ul>\n<p>选择哪种方式，首先要考虑我们能否具有足够的采集数据的能力。</p>\n<p><code>raspivid</code>命令可以调节相机模块的输出比特率。输出是以<code>H264</code>编码输出的，比特率一般默认是17Mbps，但是这个数字可以调小。 如果按照17Mbps算，就是一秒钟2.12兆字节。 我们记录数据或者获取数据的速度不能低于这个值，否则长时间录像可能造成树莓派的缓存充满，导致树莓派崩溃。</p>\n<p>树莓派的网卡是使用了其USB总线，传送速度是100Mb/s或者12.5MB/s。 实际上后文的实验表明，目前能达到的传送速度只有<strong>3MB/s（TCP）</strong> 或者 <strong>6MB/s（UDP）</strong>。</p>\n<p>如果使用SD卡存储，这个记录速度也是可以达到的，但是，SD卡有写入寿命，这是要考虑的。 例如，对于32GB的卡，即使我们能利用全部存储空间，以2MB/s的速度录像，也只能记录4.55小时。</p>\n<h1 id=\"如何通过网络实时传送数据？\"><a href=\"#如何通过网络实时传送数据？\" class=\"headerlink\" title=\"如何通过网络实时传送数据？\"></a>如何通过网络实时传送数据？</h1><p><code>raspivid</code>命令的<code>-o</code>选项，就是用来指定输出文件的。 在<code>Linux</code>系统中，输出到文件并不等于写入到磁盘（这里是SD卡）。 我们仍然可能使用<code>RAMDisk</code>这种技术，让输出只是暂时存储在内存中，并稍后读取，然后删除之。 但是，树莓派的可用内存可能只有280MB，这最多只能记录差不多2分钟的视频。</p>\n<p>如果我们有文件形式的摄像记录，那么就似乎可以使用文件传输的协议，例如<code>sftp, scp</code>等等登录到树莓派下载文件了。 然而这是不对的。这些协议在传输中使用了加密。</p>\n<p>树莓派在向我们的电脑进行数据传送的时候，如果用这些协议，就必须先对发送的数据进行加密。 在互联网上，加密是很好的设计。但是在树莓派和电脑之间只用一根网线连接的时候，就不是了。 树莓派的运算能力是很有限的，使用加密只会让传送速度变慢，所以，不要使用加密！</p>\n<p>我们使用最原始而简单的方法：<strong>使用netcat命令</strong>，在笔记本电脑这一端监听数据输入。 在树莓派这一端，我们让raspivid获取一定周期（比如10分钟，也许可以更长）的录像， 将结果设定为直接输出，然后利用Linux的管道机制，直接送进netcat发送。</p>\n<h1 id=\"配置由树莓派和笔记本构成的网络\"><a href=\"#配置由树莓派和笔记本构成的网络\" class=\"headerlink\" title=\"配置由树莓派和笔记本构成的网络\"></a>配置由树莓派和笔记本构成的网络</h1><p>树莓派和笔记本电脑之间的连接，使用普通网线即可， 因为笔记本和树莓派上的网卡都能自动适应网线，设定正确的模式（正常来说要使用交叉网线）。</p>\n<p>重要的一步是，笔记本电脑和树莓派连接后构成的网络中，需要手动为两个设备设定IP地址。 对于笔记本电脑的设定，就比较简单了。 我们将笔记本电脑和树莓派相连的网卡上，将电脑的<strong>IP地址设定为<code>xxx.xxx.x.xxx</code>，子网掩码为<code>255.255.255.0</code>，网关不要填</strong>。</p>\n<p>配置树莓派的方法是，先将树莓派断电，然后取出所用的SD卡，用读卡器插回电脑。 在SD卡的<code>boot分区</code>中，有个<code>cmdline.txt</code>，这是树莓派开机时所用到的一些参数。</p>\n<p>打开这个文件，会发现里面只有一行。这一行中用空格分开了很多设定参数。 我们在这一行的结尾，不添加空行，直接加上空格，然后写上：<code>ip=xxx.xxx.x.xxx</code></p>\n<p>当然如果这一行里面已经有了ip=的参数，应该直接修改它。</p>\n<p>这样的结果就是，树莓派开机之后，会自己选择这个IP地址作为自己的地址。 </p>\n<h1 id=\"实现在笔记本上监听输入\"><a href=\"#实现在笔记本上监听输入\" class=\"headerlink\" title=\"实现在笔记本上监听输入\"></a>实现在笔记本上监听输入</h1><p><code>netcat命令</code>，在每收到一个文件的<code>EOF</code>（End Of File，表明文件已经到结尾），就会退出。 我们为了让接收能够连续进行，需要用脚本连续运行这个命令。 这样就会为每个新接收到的视频，在笔记本电脑这一端建立一个文件用来存储。</p>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\n\nimport os\nimport signal\nimport subprocess\nimport sys\nimport uuid\n\n# 获取程序运行的本地目录，和用来存储接收结果的recv文件夹目录\n\nBASEPATH = os.path.realpath(os.path.dirname(sys.argv[0]))\nRECV = os.path.join(BASEPATH, &#39;recv&#39;)\n\n# 如果接收目录不存在，就自动新建\n\nprint &quot; *** Received files are put into: %s&quot; % RECV\nif not os.path.isdir(RECV):\n    os.system(&#39;mkdir -p %s&#39; % RECV)\n\n# 下面的部分用来记录正在等待接收的文件。这个文件会以一个UUID.tmp的格式命名。\n# 在接收成功后，就会被重命名为UUID。（UUID是一个特定格式的唯一字符串，不会重复）。\n# 如果在接收过程中按下Ctrl+C，就会发送一个终止命令给程序，这样程序会退出，\n# 并删除没有接收完整的那个文件。\n\nworking = False\nfullname = False\n\ndef sigint_handler(signum, frame):\n    global fullname, working\n    print &quot;\\n&quot;\n    print &quot; *** SIGINT detected. End the program.&quot;\n    if working and fullname != False:\n        print &quot; *** Unfinished recording deleted.&quot;\n        os.system(&#39;rm -f %s.tmp&#39; % fullname)\n    exit()\nsignal.signal(signal.SIGINT, sigint_handler)\n\n# 使用一个死循环来不断运行netcat(nc)命令。\n\nn = 1\nwhile True:\n    recname = str(uuid.uuid1())\n    print &quot; [%8d] Listening for file [%s]. Use Ctrl+C to stop this script.&quot; % (n, recname)\n    fullname = os.path.join(RECV, recname)\n\n    working = True # 标记接收开始\n    # 使用 nc -lp 10401 命令接收数据，表明端口为10401。\n    subprocess.call(&#39;nc -lp 10401 &gt; %s.tmp&#39; % fullname, shell=True)\n    os.system(&#39;mv %s.tmp %s&#39; % (fullname, fullname))\n    working = False # 标记接收完毕\n\n    n += 1</code></pre>\n<p>上文所述的脚本，在笔记本上运行之后，就会在本地开启10401端口，等待树莓派上传送的文件。 传送的会直接写入一个由UUID（全局唯一ID）标识的文件中，可以供以后处理。</p>\n<h1 id=\"在树莓派上摄像并发送摄像结果\"><a href=\"#在树莓派上摄像并发送摄像结果\" class=\"headerlink\" title=\"在树莓派上摄像并发送摄像结果\"></a>在树莓派上摄像并发送摄像结果</h1><p>在树莓派上命令拍摄的方法是：</p>\n<pre><code class=\"powershell\">$ raspivid -o - -b 16000000 -t 100000 | nc xxx.xxx.x.xxx 10401</code></pre>\n<p><strong>这条指令的意义如下</strong>：</p>\n<ul>\n<li>-o -，使用-o设定输出，-表示直接输出到标准输出中，不写入文件。</li>\n<li>-b 16000000，设定输出比特率为16000000 bit/s。这大约是2兆字节每秒。</li>\n<li>-t 100000，设定录像时间为100000毫秒，亦即100秒。</li>\n<li>| nc xxx.xxx.x.xxx 10401，使用管道|将结果导入到nc中，nc是发送模式，目标是xxx.xxx.x.xxx计算机上的10401端口。</li>\n</ul>\n"},{"title":"十大经典排序算法整理汇总（附代码）","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-16T07:09:23.000Z","password":null,"summary":"本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。","_content":"\n> 关注公众号【做一个柔情的程序猿】，每日算法干货马上就来！\n\n![](/medias/contact.jpg)\n\n## 前言\n\n本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。\n\n**本文并不会详细讲解每种排序算法的原理**，网上有很多很好的教程，大家可以自己去搜了看。\n\n最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 [LeetCode 912. 排序数组](https://leetcode-cn.com/problems/sort-an-array/ \"LeetCode 912. 排序数组\") 这道题。\n\n## 性质汇总\n\n> 如果发现表中有错误，请留言告知。\n\n|   算法  |   最好  |  最坏   |  平均   |  空间   |  稳定性   | 是否基于比较\n| --- | --- | --- | --- | --- | :---: | :---: |\n|  冒泡排序   |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|   选择排序  |  $O(n^2)$  |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\times$  | $\\checkmark$ |\n|   插入排序  |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|  快速排序   |  $O(n\\log n)$   |  $O(n^2)$   |  $O(n\\log n)$   |  $O(\\log n)$~$O(n)$   |  $\\times$   | $\\checkmark$ |\n|  归并排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(n)$  |  $\\checkmark$   | $\\checkmark$ |\n|   希尔排序  |  $O(n^{1.3})$   |   $O(n^2)$  |  $O(n\\log n)$~$O(n^2)$   |  $O(1)$   | $\\times$    | $\\checkmark$ |\n|  计数排序   |  $O(n+k)$   |   $O(n+k)$  |   $O(n+k)$  |  $O(n+k)$   |  $\\checkmark$   | $\\times$ |\n|   基数排序  |   $O(nk)$  |  $O(nk)$   |   $O(nk)$  |   $O(n+k)$  |  $\\checkmark$   | $\\times$ |\n|  桶排序   |   $O(n)$  |   $O(n)$  |   $O(n)$  |  $O(n+m)$   |  $\\checkmark$   | $\\times$ |\n|  堆排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(1)$  |  $\\times$   | $\\checkmark$ |\n\n\n\n> 如果表格显示有问题的话，还可以直接看下面的汇总图：\n\n![十大经典排序算法性质汇总](1.png)\n\n### 维基百科\n\n我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。\n\n**冒泡排序**  \n[https://en.wikipedia.org/wiki/Bubble_sort](https://en.wikipedia.org/wiki/Bubble_sort)\n\n**选择排序**  \n[https://en.wikipedia.org/wiki/Selection_sort](https://en.wikipedia.org/wiki/Selection_sort)\n\n**插入排序**  \n[https://en.wikipedia.org/wiki/Insertion_sort](https://en.wikipedia.org/wiki/Insertion_sort)\n\n**快速排序**  \n[https://en.wikipedia.org/wiki/Quicksort](https://en.wikipedia.org/wiki/Quicksort)\n\n**归并排序**  \n[https://en.wikipedia.org/wiki/Merge_sort](https://en.wikipedia.org/wiki/Merge_sort)\n\n**希尔排序**  \n[https://en.wikipedia.org/wiki/Shellsort](https://en.wikipedia.org/wiki/Shellsort)\n\n**计数排序**  \n[https://en.wikipedia.org/wiki/Counting_sort](https://en.wikipedia.org/wiki/Counting_sort)\n\n**基数排序**  \n[https://en.wikipedia.org/wiki/Radix_sort](https://en.wikipedia.org/wiki/Radix_sort)\n\n**桶排序**  \n[https://en.wikipedia.org/wiki/Bucket_sort](https://en.wikipedia.org/wiki/Bucket_sort)\n\n**堆排序**  \n[https://en.wikipedia.org/wiki/Heapsort](https://en.wikipedia.org/wiki/Heapsort)\n\n## 代码实现\n\n所有的排序算法接口都是相同的，也就是 `vector<int> xxxSort(vector<int>& nums)` 。只需要你传入一个 `vector<int>` 类型的数组，就能返回排序后的结果。\n\n运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。\n\n```cpp\nclass Solution {\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        return quickSort(nums);\n    }\n\n    // 冒泡排序（超时）\n    vector<int> bubbleSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = n-2; j >= i; --j) {\n                if (nums[j] > nums[j+1]) {\n                    swap(nums[j], nums[j+1]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 选择排序（超时）\n    vector<int> selectSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            int idx = i;\n            for (int j = i; j < n; ++j) {\n                if (nums[j] < nums[idx]) {\n                    idx = j;\n                }\n            }\n            swap(nums[i], nums[idx]);\n        }\n        return nums;\n    }\n\n    // 插入排序（超时）\n    vector<int> insertSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = i; j > 0 && nums[j] < nums[j-1]; --j) {\n                swap(nums[j], nums[j-1]);\n            }\n        }\n        return nums;\n    }\n\n    // 快速排序（24 ms）\n    void qSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return;\n        int m = l;\n        for (int i = l; i < r; ++i) {\n            if (nums[i] < nums[r]) {\n                swap(nums[m++], nums[i]);\n            }\n        }\n        swap(nums[m], nums[r]);\n        qSort(nums, l, m-1);\n        qSort(nums, m+1, r);\n    }\n\n    vector<int> quickSort(vector<int>& nums) {\n        int n = nums.size();\n        qSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序（192 ms）\n    vector<int> mSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return {nums[l]};\n        int m = l+(r-l)/2;\n        vector<int> lnums = mSort(nums, l, m);\n        vector<int> rnums = mSort(nums, m+1, r);\n        vector<int> res;\n        int i = 0, j = 0;\n        while (i <= m-l && j <= r-m-1) {\n            if (lnums[i] < rnums[j]) {\n                res.push_back(lnums[i++]);\n            } else {\n                res.push_back(rnums[j++]);\n            }\n        }\n        while (i <= m-l) {\n            res.push_back(lnums[i++]);\n        }\n        while (j <= r-m-1) {\n            res.push_back(rnums[j++]);\n        }\n        return res;\n    }\n\n    vector<int> mergeSort(vector<int>& nums) {\n        int n = nums.size();\n        nums = mSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序 + 非递归（80 ms）\n    vector<int> mergeSortNR(vector<int>& nums) {\n        int n = nums.size();\n        for (int len = 1; len < n; len <<= 1) {\n            for (int l = 0; l < n-len; l += 2*len) {\n                int m = l+len-1;\n                int r = min(n-1, l+2*len-1);\n                vector<int> res;\n                int i = l, j = m+1;\n                while (i <= m && j <= r) {\n                    if (nums[i] < nums[j]) {\n                        res.push_back(nums[i++]);\n                    } else {\n                        res.push_back(nums[j++]);\n                    }\n                }\n                while (i <= m) {\n                    res.push_back(nums[i++]);\n                }\n                while (j <= r) {\n                    res.push_back(nums[j++]);\n                }\n                for (int i = l; i <= r; ++i) {\n                    nums[i] = res[i-l];\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 希尔排序（40 ms）\n    vector<int> shellSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; ++i) {\n                for (int j = i; j-gap >= 0 && nums[j-gap] > nums[j]; j -= gap) {\n                    swap(nums[j-gap], nums[j]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 计数排序（32 ms）\n    vector<int> countSort(vector<int>& nums) {\n        int n = nums.size();\n        if (!n) return {};\n        int minv = *min_element(nums.begin(), nums.end());\n        int maxv = *max_element(nums.begin(), nums.end());\n        int m = maxv-minv+1;\n        vector<int> count(m, 0);\n        for (int i = 0; i < n; ++i) {\n            count[nums[i]-minv]++;\n        }\n        vector<int> res;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < count[i]; ++j) {\n                res.push_back(i+minv);\n            }\n        }\n        return res;\n    }\n\n    // 基数排序（不适用于负数）\n    vector<int> radixSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int maxd = 0;\n        while (maxv > 0) {\n            maxv /= 10;\n            maxd++;\n        }\n        vector<int> count(10, 0), rank(n, 0);\n        int base = 1;\n        while (maxd > 0) {\n            count.assign(10, 0);\n            for (int i = 0; i < n; ++i) {\n                count[(nums[i]/base)%10]++;\n            }\n            for (int i = 1; i < 10; ++i) {\n                count[i] += count[i-1];\n            }\n            for (int i = n-1; i >= 0; --i) {\n                rank[--count[(nums[i]/base)%10]] = nums[i];\n            }\n            for (int i = 0; i < n; ++i) {\n                nums[i] = rank[i];\n            }\n            maxd--;\n            base *= 10;\n        }\n        return nums;\n    }\n\n    // 桶排序 (20 ms)\n    vector<int> bucketSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int minv = *min_element(nums.begin(), nums.end());\n        int bs = 1000;\n        int m = (maxv-minv)/bs+1;\n        vector<vector<int> > bucket(m);\n        for (int i = 0; i < n; ++i) {\n            bucket[(nums[i]-minv)/bs].push_back(nums[i]);\n        }\n        int idx = 0;\n        for (int i = 0; i < m; ++i) {\n            int sz = bucket[i].size();\n            bucket[i] = quickSort(bucket[i]);\n            for (int j = 0; j < sz; ++j) {\n                nums[idx++] = bucket[i][j];\n            }\n        }\n        return nums;\n    }\n\n    // 堆排序（32 ms）\n    void adjust(vector<int>& nums, int p, int s) {\n        while (2*p+1 < s) {\n            int c1 = 2*p+1;\n            int c2 = 2*p+2;\n            int c = (c2<s && nums[c2]>nums[c1]) ? c2 : c1;\n            if (nums[c] > nums[p]) swap(nums[c], nums[p]);\n            else break;\n            p = c;\n        }\n    }\n\n    vector<int> heapSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = n/2-1; i >= 0; --i) {\n            adjust(nums, i, n);\n        }\n        for (int i = n-1; i > 0; --i) {\n            swap(nums[0], nums[i]);\n            adjust(nums, 0, i);\n        }\n        return nums;\n    }\n};\n```","source":"_posts/sort-algorithms.md","raw":"---\ntitle: 十大经典排序算法整理汇总（附代码）\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-16 15:09:23\npassword:\nsummary: 本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。\ntags:\n- leetcode\n- 算法\ncategories:\n- 编程算法\n---\n\n> 关注公众号【做一个柔情的程序猿】，每日算法干货马上就来！\n\n![](/medias/contact.jpg)\n\n## 前言\n\n本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。\n\n**本文并不会详细讲解每种排序算法的原理**，网上有很多很好的教程，大家可以自己去搜了看。\n\n最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 [LeetCode 912. 排序数组](https://leetcode-cn.com/problems/sort-an-array/ \"LeetCode 912. 排序数组\") 这道题。\n\n## 性质汇总\n\n> 如果发现表中有错误，请留言告知。\n\n|   算法  |   最好  |  最坏   |  平均   |  空间   |  稳定性   | 是否基于比较\n| --- | --- | --- | --- | --- | :---: | :---: |\n|  冒泡排序   |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|   选择排序  |  $O(n^2)$  |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\times$  | $\\checkmark$ |\n|   插入排序  |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|  快速排序   |  $O(n\\log n)$   |  $O(n^2)$   |  $O(n\\log n)$   |  $O(\\log n)$~$O(n)$   |  $\\times$   | $\\checkmark$ |\n|  归并排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(n)$  |  $\\checkmark$   | $\\checkmark$ |\n|   希尔排序  |  $O(n^{1.3})$   |   $O(n^2)$  |  $O(n\\log n)$~$O(n^2)$   |  $O(1)$   | $\\times$    | $\\checkmark$ |\n|  计数排序   |  $O(n+k)$   |   $O(n+k)$  |   $O(n+k)$  |  $O(n+k)$   |  $\\checkmark$   | $\\times$ |\n|   基数排序  |   $O(nk)$  |  $O(nk)$   |   $O(nk)$  |   $O(n+k)$  |  $\\checkmark$   | $\\times$ |\n|  桶排序   |   $O(n)$  |   $O(n)$  |   $O(n)$  |  $O(n+m)$   |  $\\checkmark$   | $\\times$ |\n|  堆排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(1)$  |  $\\times$   | $\\checkmark$ |\n\n\n\n> 如果表格显示有问题的话，还可以直接看下面的汇总图：\n\n![十大经典排序算法性质汇总](1.png)\n\n### 维基百科\n\n我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。\n\n**冒泡排序**  \n[https://en.wikipedia.org/wiki/Bubble_sort](https://en.wikipedia.org/wiki/Bubble_sort)\n\n**选择排序**  \n[https://en.wikipedia.org/wiki/Selection_sort](https://en.wikipedia.org/wiki/Selection_sort)\n\n**插入排序**  \n[https://en.wikipedia.org/wiki/Insertion_sort](https://en.wikipedia.org/wiki/Insertion_sort)\n\n**快速排序**  \n[https://en.wikipedia.org/wiki/Quicksort](https://en.wikipedia.org/wiki/Quicksort)\n\n**归并排序**  \n[https://en.wikipedia.org/wiki/Merge_sort](https://en.wikipedia.org/wiki/Merge_sort)\n\n**希尔排序**  \n[https://en.wikipedia.org/wiki/Shellsort](https://en.wikipedia.org/wiki/Shellsort)\n\n**计数排序**  \n[https://en.wikipedia.org/wiki/Counting_sort](https://en.wikipedia.org/wiki/Counting_sort)\n\n**基数排序**  \n[https://en.wikipedia.org/wiki/Radix_sort](https://en.wikipedia.org/wiki/Radix_sort)\n\n**桶排序**  \n[https://en.wikipedia.org/wiki/Bucket_sort](https://en.wikipedia.org/wiki/Bucket_sort)\n\n**堆排序**  \n[https://en.wikipedia.org/wiki/Heapsort](https://en.wikipedia.org/wiki/Heapsort)\n\n## 代码实现\n\n所有的排序算法接口都是相同的，也就是 `vector<int> xxxSort(vector<int>& nums)` 。只需要你传入一个 `vector<int>` 类型的数组，就能返回排序后的结果。\n\n运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。\n\n```cpp\nclass Solution {\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        return quickSort(nums);\n    }\n\n    // 冒泡排序（超时）\n    vector<int> bubbleSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = n-2; j >= i; --j) {\n                if (nums[j] > nums[j+1]) {\n                    swap(nums[j], nums[j+1]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 选择排序（超时）\n    vector<int> selectSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            int idx = i;\n            for (int j = i; j < n; ++j) {\n                if (nums[j] < nums[idx]) {\n                    idx = j;\n                }\n            }\n            swap(nums[i], nums[idx]);\n        }\n        return nums;\n    }\n\n    // 插入排序（超时）\n    vector<int> insertSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = i; j > 0 && nums[j] < nums[j-1]; --j) {\n                swap(nums[j], nums[j-1]);\n            }\n        }\n        return nums;\n    }\n\n    // 快速排序（24 ms）\n    void qSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return;\n        int m = l;\n        for (int i = l; i < r; ++i) {\n            if (nums[i] < nums[r]) {\n                swap(nums[m++], nums[i]);\n            }\n        }\n        swap(nums[m], nums[r]);\n        qSort(nums, l, m-1);\n        qSort(nums, m+1, r);\n    }\n\n    vector<int> quickSort(vector<int>& nums) {\n        int n = nums.size();\n        qSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序（192 ms）\n    vector<int> mSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return {nums[l]};\n        int m = l+(r-l)/2;\n        vector<int> lnums = mSort(nums, l, m);\n        vector<int> rnums = mSort(nums, m+1, r);\n        vector<int> res;\n        int i = 0, j = 0;\n        while (i <= m-l && j <= r-m-1) {\n            if (lnums[i] < rnums[j]) {\n                res.push_back(lnums[i++]);\n            } else {\n                res.push_back(rnums[j++]);\n            }\n        }\n        while (i <= m-l) {\n            res.push_back(lnums[i++]);\n        }\n        while (j <= r-m-1) {\n            res.push_back(rnums[j++]);\n        }\n        return res;\n    }\n\n    vector<int> mergeSort(vector<int>& nums) {\n        int n = nums.size();\n        nums = mSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序 + 非递归（80 ms）\n    vector<int> mergeSortNR(vector<int>& nums) {\n        int n = nums.size();\n        for (int len = 1; len < n; len <<= 1) {\n            for (int l = 0; l < n-len; l += 2*len) {\n                int m = l+len-1;\n                int r = min(n-1, l+2*len-1);\n                vector<int> res;\n                int i = l, j = m+1;\n                while (i <= m && j <= r) {\n                    if (nums[i] < nums[j]) {\n                        res.push_back(nums[i++]);\n                    } else {\n                        res.push_back(nums[j++]);\n                    }\n                }\n                while (i <= m) {\n                    res.push_back(nums[i++]);\n                }\n                while (j <= r) {\n                    res.push_back(nums[j++]);\n                }\n                for (int i = l; i <= r; ++i) {\n                    nums[i] = res[i-l];\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 希尔排序（40 ms）\n    vector<int> shellSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; ++i) {\n                for (int j = i; j-gap >= 0 && nums[j-gap] > nums[j]; j -= gap) {\n                    swap(nums[j-gap], nums[j]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 计数排序（32 ms）\n    vector<int> countSort(vector<int>& nums) {\n        int n = nums.size();\n        if (!n) return {};\n        int minv = *min_element(nums.begin(), nums.end());\n        int maxv = *max_element(nums.begin(), nums.end());\n        int m = maxv-minv+1;\n        vector<int> count(m, 0);\n        for (int i = 0; i < n; ++i) {\n            count[nums[i]-minv]++;\n        }\n        vector<int> res;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < count[i]; ++j) {\n                res.push_back(i+minv);\n            }\n        }\n        return res;\n    }\n\n    // 基数排序（不适用于负数）\n    vector<int> radixSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int maxd = 0;\n        while (maxv > 0) {\n            maxv /= 10;\n            maxd++;\n        }\n        vector<int> count(10, 0), rank(n, 0);\n        int base = 1;\n        while (maxd > 0) {\n            count.assign(10, 0);\n            for (int i = 0; i < n; ++i) {\n                count[(nums[i]/base)%10]++;\n            }\n            for (int i = 1; i < 10; ++i) {\n                count[i] += count[i-1];\n            }\n            for (int i = n-1; i >= 0; --i) {\n                rank[--count[(nums[i]/base)%10]] = nums[i];\n            }\n            for (int i = 0; i < n; ++i) {\n                nums[i] = rank[i];\n            }\n            maxd--;\n            base *= 10;\n        }\n        return nums;\n    }\n\n    // 桶排序 (20 ms)\n    vector<int> bucketSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int minv = *min_element(nums.begin(), nums.end());\n        int bs = 1000;\n        int m = (maxv-minv)/bs+1;\n        vector<vector<int> > bucket(m);\n        for (int i = 0; i < n; ++i) {\n            bucket[(nums[i]-minv)/bs].push_back(nums[i]);\n        }\n        int idx = 0;\n        for (int i = 0; i < m; ++i) {\n            int sz = bucket[i].size();\n            bucket[i] = quickSort(bucket[i]);\n            for (int j = 0; j < sz; ++j) {\n                nums[idx++] = bucket[i][j];\n            }\n        }\n        return nums;\n    }\n\n    // 堆排序（32 ms）\n    void adjust(vector<int>& nums, int p, int s) {\n        while (2*p+1 < s) {\n            int c1 = 2*p+1;\n            int c2 = 2*p+2;\n            int c = (c2<s && nums[c2]>nums[c1]) ? c2 : c1;\n            if (nums[c] > nums[p]) swap(nums[c], nums[p]);\n            else break;\n            p = c;\n        }\n    }\n\n    vector<int> heapSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = n/2-1; i >= 0; --i) {\n            adjust(nums, i, n);\n        }\n        for (int i = n-1; i > 0; --i) {\n            swap(nums[0], nums[i]);\n            adjust(nums, 0, i);\n        }\n        return nums;\n    }\n};\n```","slug":"sort-algorithms","published":1,"updated":"2020-12-01T01:57:33.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki8tmm4b0007v8vb4geqexd0","content":"<blockquote>\n<p>关注公众号【做一个柔情的程序猿】，每日算法干货马上就来！</p>\n</blockquote>\n<p><img src=\"/medias/contact.jpg\" alt></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p>\n<p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p>\n<p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href=\"https://leetcode-cn.com/problems/sort-an-array/\" title=\"LeetCode 912. 排序数组\" target=\"_blank\" rel=\"noopener\">LeetCode 912. 排序数组</a> 这道题。</p>\n<h2 id=\"性质汇总\"><a href=\"#性质汇总\" class=\"headerlink\" title=\"性质汇总\"></a>性质汇总</h2><blockquote>\n<p>如果发现表中有错误，请留言告知。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>最好</th>\n<th>最坏</th>\n<th>平均</th>\n<th>空间</th>\n<th align=\"center\">稳定性</th>\n<th align=\"center\">是否基于比较</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>冒泡排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(\\log n)$~$O(n)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>$O(n^{1.3})$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$~$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n+m)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p>\n</blockquote>\n<p><img src=\"1.png\" alt=\"十大经典排序算法性质汇总\"></p>\n<h3 id=\"维基百科\"><a href=\"#维基百科\" class=\"headerlink\" title=\"维基百科\"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p>\n<p><strong>冒泡排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bubble_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Bubble_sort</a></p>\n<p><strong>选择排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Selection_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Selection_sort</a></p>\n<p><strong>插入排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Insertion_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Insertion_sort</a></p>\n<p><strong>快速排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Quicksort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Quicksort</a></p>\n<p><strong>归并排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Merge_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Merge_sort</a></p>\n<p><strong>希尔排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Shellsort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Shellsort</a></p>\n<p><strong>计数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Counting_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Counting_sort</a></p>\n<p><strong>基数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Radix_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Radix_sort</a></p>\n<p><strong>桶排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bucket_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Bucket_sort</a></p>\n<p><strong>堆排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Heapsort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Heapsort</a></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p>\n<p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sortArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 冒泡排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> n<span class=\"token number\">-2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 选择排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    idx <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 插入排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 快速排序（24 ms）</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">>=</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 归并排序（192 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">>=</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> lnums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> rnums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token operator\">-</span>l <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token operator\">-</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rnums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token operator\">-</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 归并排序 + 非递归（80 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">mergeSortNR</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">-</span>len<span class=\"token punctuation\">;</span> l <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>len<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> l<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>len<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 希尔排序（40 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">shellSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> gap<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">-</span>gap <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">-</span><span class=\"token operator\">=</span> gap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 计数排序（32 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">countSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> minv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">min_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> maxv<span class=\"token operator\">-</span>minv<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minv<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>minv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 基数排序（不适用于负数）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxv <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxv <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            maxd<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rank</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxd <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                rank<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rank<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            maxd<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            base <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 桶排序 (20 ms)</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">bucketSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> minv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">min_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> bs <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>maxv<span class=\"token operator\">-</span>minv<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>bs<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            bucket<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minv<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>bs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 堆排序（32 ms）</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> c1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c2<span class=\"token operator\">&lt;</span>s <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>nums<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> c2 <span class=\"token operator\">:</span> c1<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            p <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">heapSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>关注公众号【做一个柔情的程序猿】，每日算法干货马上就来！</p>\n</blockquote>\n<p><img src=\"/medias/contact.jpg\" alt></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p>\n<p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p>\n<p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href=\"https://leetcode-cn.com/problems/sort-an-array/\" title=\"LeetCode 912. 排序数组\" target=\"_blank\" rel=\"noopener\">LeetCode 912. 排序数组</a> 这道题。</p>\n<h2 id=\"性质汇总\"><a href=\"#性质汇总\" class=\"headerlink\" title=\"性质汇总\"></a>性质汇总</h2><blockquote>\n<p>如果发现表中有错误，请留言告知。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>最好</th>\n<th>最坏</th>\n<th>平均</th>\n<th>空间</th>\n<th align=\"center\">稳定性</th>\n<th align=\"center\">是否基于比较</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>冒泡排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(\\log n)$~$O(n)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>$O(n^{1.3})$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$~$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n+m)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p>\n</blockquote>\n<p><img src=\"1.png\" alt=\"十大经典排序算法性质汇总\"></p>\n<h3 id=\"维基百科\"><a href=\"#维基百科\" class=\"headerlink\" title=\"维基百科\"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p>\n<p><strong>冒泡排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bubble_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Bubble_sort</a></p>\n<p><strong>选择排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Selection_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Selection_sort</a></p>\n<p><strong>插入排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Insertion_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Insertion_sort</a></p>\n<p><strong>快速排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Quicksort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Quicksort</a></p>\n<p><strong>归并排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Merge_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Merge_sort</a></p>\n<p><strong>希尔排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Shellsort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Shellsort</a></p>\n<p><strong>计数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Counting_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Counting_sort</a></p>\n<p><strong>基数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Radix_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Radix_sort</a></p>\n<p><strong>桶排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bucket_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Bucket_sort</a></p>\n<p><strong>堆排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Heapsort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Heapsort</a></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p>\n<p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    vector&lt;int&gt; sortArray(vector&lt;int&gt;&amp; nums) {\n        return quickSort(nums);\n    }\n\n    // 冒泡排序（超时）\n    vector&lt;int&gt; bubbleSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        for (int i = 0; i &lt; n; ++i) {\n            for (int j = n-2; j &gt;= i; --j) {\n                if (nums[j] &gt; nums[j+1]) {\n                    swap(nums[j], nums[j+1]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 选择排序（超时）\n    vector&lt;int&gt; selectSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        for (int i = 0; i &lt; n; ++i) {\n            int idx = i;\n            for (int j = i; j &lt; n; ++j) {\n                if (nums[j] &lt; nums[idx]) {\n                    idx = j;\n                }\n            }\n            swap(nums[i], nums[idx]);\n        }\n        return nums;\n    }\n\n    // 插入排序（超时）\n    vector&lt;int&gt; insertSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        for (int i = 0; i &lt; n; ++i) {\n            for (int j = i; j &gt; 0 &amp;&amp; nums[j] &lt; nums[j-1]; --j) {\n                swap(nums[j], nums[j-1]);\n            }\n        }\n        return nums;\n    }\n\n    // 快速排序（24 ms）\n    void qSort(vector&lt;int&gt;&amp; nums, int l, int r) {\n        if (l &gt;= r) return;\n        int m = l;\n        for (int i = l; i &lt; r; ++i) {\n            if (nums[i] &lt; nums[r]) {\n                swap(nums[m++], nums[i]);\n            }\n        }\n        swap(nums[m], nums[r]);\n        qSort(nums, l, m-1);\n        qSort(nums, m+1, r);\n    }\n\n    vector&lt;int&gt; quickSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        qSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序（192 ms）\n    vector&lt;int&gt; mSort(vector&lt;int&gt;&amp; nums, int l, int r) {\n        if (l &gt;= r) return {nums[l]};\n        int m = l+(r-l)/2;\n        vector&lt;int&gt; lnums = mSort(nums, l, m);\n        vector&lt;int&gt; rnums = mSort(nums, m+1, r);\n        vector&lt;int&gt; res;\n        int i = 0, j = 0;\n        while (i &lt;= m-l &amp;&amp; j &lt;= r-m-1) {\n            if (lnums[i] &lt; rnums[j]) {\n                res.push_back(lnums[i++]);\n            } else {\n                res.push_back(rnums[j++]);\n            }\n        }\n        while (i &lt;= m-l) {\n            res.push_back(lnums[i++]);\n        }\n        while (j &lt;= r-m-1) {\n            res.push_back(rnums[j++]);\n        }\n        return res;\n    }\n\n    vector&lt;int&gt; mergeSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        nums = mSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序 + 非递归（80 ms）\n    vector&lt;int&gt; mergeSortNR(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        for (int len = 1; len &lt; n; len &lt;&lt;= 1) {\n            for (int l = 0; l &lt; n-len; l += 2*len) {\n                int m = l+len-1;\n                int r = min(n-1, l+2*len-1);\n                vector&lt;int&gt; res;\n                int i = l, j = m+1;\n                while (i &lt;= m &amp;&amp; j &lt;= r) {\n                    if (nums[i] &lt; nums[j]) {\n                        res.push_back(nums[i++]);\n                    } else {\n                        res.push_back(nums[j++]);\n                    }\n                }\n                while (i &lt;= m) {\n                    res.push_back(nums[i++]);\n                }\n                while (j &lt;= r) {\n                    res.push_back(nums[j++]);\n                }\n                for (int i = l; i &lt;= r; ++i) {\n                    nums[i] = res[i-l];\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 希尔排序（40 ms）\n    vector&lt;int&gt; shellSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        for (int gap = n/2; gap &gt; 0; gap /= 2) {\n            for (int i = gap; i &lt; n; ++i) {\n                for (int j = i; j-gap &gt;= 0 &amp;&amp; nums[j-gap] &gt; nums[j]; j -= gap) {\n                    swap(nums[j-gap], nums[j]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 计数排序（32 ms）\n    vector&lt;int&gt; countSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        if (!n) return {};\n        int minv = *min_element(nums.begin(), nums.end());\n        int maxv = *max_element(nums.begin(), nums.end());\n        int m = maxv-minv+1;\n        vector&lt;int&gt; count(m, 0);\n        for (int i = 0; i &lt; n; ++i) {\n            count[nums[i]-minv]++;\n        }\n        vector&lt;int&gt; res;\n        for (int i = 0; i &lt; m; ++i) {\n            for (int j = 0; j &lt; count[i]; ++j) {\n                res.push_back(i+minv);\n            }\n        }\n        return res;\n    }\n\n    // 基数排序（不适用于负数）\n    vector&lt;int&gt; radixSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int maxd = 0;\n        while (maxv &gt; 0) {\n            maxv /= 10;\n            maxd++;\n        }\n        vector&lt;int&gt; count(10, 0), rank(n, 0);\n        int base = 1;\n        while (maxd &gt; 0) {\n            count.assign(10, 0);\n            for (int i = 0; i &lt; n; ++i) {\n                count[(nums[i]/base)%10]++;\n            }\n            for (int i = 1; i &lt; 10; ++i) {\n                count[i] += count[i-1];\n            }\n            for (int i = n-1; i &gt;= 0; --i) {\n                rank[--count[(nums[i]/base)%10]] = nums[i];\n            }\n            for (int i = 0; i &lt; n; ++i) {\n                nums[i] = rank[i];\n            }\n            maxd--;\n            base *= 10;\n        }\n        return nums;\n    }\n\n    // 桶排序 (20 ms)\n    vector&lt;int&gt; bucketSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int minv = *min_element(nums.begin(), nums.end());\n        int bs = 1000;\n        int m = (maxv-minv)/bs+1;\n        vector&lt;vector&lt;int&gt; &gt; bucket(m);\n        for (int i = 0; i &lt; n; ++i) {\n            bucket[(nums[i]-minv)/bs].push_back(nums[i]);\n        }\n        int idx = 0;\n        for (int i = 0; i &lt; m; ++i) {\n            int sz = bucket[i].size();\n            bucket[i] = quickSort(bucket[i]);\n            for (int j = 0; j &lt; sz; ++j) {\n                nums[idx++] = bucket[i][j];\n            }\n        }\n        return nums;\n    }\n\n    // 堆排序（32 ms）\n    void adjust(vector&lt;int&gt;&amp; nums, int p, int s) {\n        while (2*p+1 &lt; s) {\n            int c1 = 2*p+1;\n            int c2 = 2*p+2;\n            int c = (c2&lt;s &amp;&amp; nums[c2]&gt;nums[c1]) ? c2 : c1;\n            if (nums[c] &gt; nums[p]) swap(nums[c], nums[p]);\n            else break;\n            p = c;\n        }\n    }\n\n    vector&lt;int&gt; heapSort(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        for (int i = n/2-1; i &gt;= 0; --i) {\n            adjust(nums, i, n);\n        }\n        for (int i = n-1; i &gt; 0; --i) {\n            swap(nums[0], nums[i]);\n            adjust(nums, 0, i);\n        }\n        return nums;\n    }\n};</code></pre>\n"},{"title":"基于混沌Logistic加密算法的图片加密与还原","date":"2020-12-01T00:12:04.000Z","_content":"\n# 摘要\n\n> 一种基于混沌Logistic加密算法的图片加密与还原的方法，并利用Lena图和Baboon图来验证这种加密算法的加密效果。为了能够体现该算法在图片信息加密的效果，本文还采用了普通行列置乱加密算法和像素点的RGB的值的缩放算法这两种算法对相同的图片的图片进行处理，利用matlab通过显示加密过后的图片以及直方图分析可以很直观的发现混沌Logistic加密算法对图片信息加密的效果更好，并且很好地隐藏了原始图像的统计特性，能够有效地抵御基于图像像素值的统计攻击，达到了图像加密的效果。\n\n# 混沌Logistic映射的理论\n\n## 混沌的基本概念\n\n1975年，美国数学家约克和美籍华人李天岩发表了《周期3意味着混沌》的文章，首次提出了“混沌”—词，阐述了混沌的数学定义，对混沌学的发展具有重大意义。自此以后，混沌研究开始蓬勃发展。\n混沌是指在确定性动力学系统中，由于对初值敏感而表现出的类似随机的、不可预测的运动。混沌是确定的非线性系统中出现的内在随机性现象，其变化并非随机确貌似随机。\n\n## Logistic映射方程\n\nLogistic映射是一个典型的非线性的迭代方程，如式所示：\n                               ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322115202600.png)\n称为Logistic映射的控制参数，对任意的k有![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322115314240.png)，其中k为迭代时间步。==Logistic映射的动态行为与控制参数u密切相关==，对于不同的u值系统将呈现不同的特性（即当k趋于无穷大，xk的变化情况）。其中==Logistic映射有两个主要的参数，一个是初值x0，一个是系统参数μ==，研究表明，==当 0<μ<=3.5699456时，Logistic呈现出周期性；而当映射方程满足0<x0<1和3.5699456<μ<=4这两个条件时，Logistic映射处于混沌状态==，即一种无序的、不可预测的、混乱的、摸不到头、摸不到尾的状态。对给定的初始值x0，生成的序列是非周期性、非收敛以及对初始条件敏感的。\n\n> 有界性\n混沌是有界的，它的运动轨线始终局限于一个确定的区域，这个区域称为混沌吸引域。由图 所示，无论控制参数μ怎么变，迭代值xn始终在(0,1)之间。\n\n![**不同控制参数μ下的Logistic分岔图**](https://img-blog.csdnimg.cn/20200322120312766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70)\n\n# 混沌Logistic映射与其他加密算法介绍\n\n## 普通行列置乱加密算法\n\n### 普通置乱加密算法的流程\n\n将读入的水印图片，先获取图片的大小，得到原始图片矩阵，首先随机打乱各行，输出打乱后的矩阵，再将这个矩阵随机打乱各列，最后图像成功加密，显示加密图像。算法流程框图如图：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322120508960.png)\n\n### 算法分析\n\n```\ns = size(handles.img);\nr = randsample(s(1), s(1)); \nRGBS = handles.img(r, :, :);\nc = randsample(s(2), s(2)); \nRGBSS = RGBS(:, c, :);\naxes(handles.axes2);        \nimshow(RGBSS); \ntitle('普通置乱加密图像');\nfigure(2);\nhist_im=histogram(RGBSS); %加密后直方图\ntitle('普通置乱加密直方图');\n```\n\n## 像素点的RGB值缩放加密\n\n### 像素点的RGB值缩放加密算法的流程\n\n首先读入原始图片，通过size获取水印图片的大小矩阵，接着获取图片各R、G、B的值，然后将获取到的RGB值分别扩大20倍并将值赋给r，最后再将r与将水印图片转换成double类型的矩阵进行点乘运算实现图像的成功加密。算法流程框图如图：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322120755105.png)\n\n### 算法分析\n\n```\ns = size(handles.img);\nr = rand(s(1), s(2), s(3)) * 20;\nRGBD = im2double(handles.img);\nRGB_jiami = RGBD .* r;\naxes(handles.axes2);      \nimshow(RGB_jiami); \ntitle('像素点的RGB值缩放加密图像');\nfigure(3);\nhist_im=histogram(RGB_jiami); \ntitle('像素点的RGB值缩放加密直方图');\n```\n\n## 混沌Logistic映射加密算法\n\n### 混沌Logistic映射加密算法模型\n\n读入待处理的原始图片，通过加密密钥进入混沌序列，通过混沌系统设计加密算法，实现加密目的；再输入解密密钥，把加密过程逆向运算即可得到解密图像。系统参数u和初值x0设置成密钥。混沌Logistic映射加密算法模型如图：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322121024286.png)\n\n当迭代n次后，我们就得到了x1、x2、…，xn这n个值，这就是一个混沌序列，是一维的，称作序列A，也就是我们想要得到的序列，在MATLAB中，可以看出xi（i=1,2,…,n）的取值是在(0,1)之间的，就像图像灰度值是在(0,255)之间一样。那么我们把这个一维序列归一化到(0,255)之间得到序列B。异或过程如图：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322121130568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70)\n\n### 算法分析\n```  \nu=4;   \nfor i=1:500 \n    x=u*x*(1-x); \nend \nfprintf('x(k+1)=%d\\n',x); \nA=zeros(1,M*N); \nA(1)=x;   \nfor i=1:M*N-1 \n    A(i+1)=u*A(i)*(1-A(i)); \nend\nB=uint8(255*A); %\nImgn=reshape(B,M,N);   \nC=zeros(M,N); \nfor x=1:M \n    for y=1:N \n        C(x,y)=handles.img(x,y); \n    end\nend\nC; \nD=uint8(C); \nRod=bitxor(D,Imgn); \nRod; \nrod=reshape(Rod,M,N/3,3); \n```\n\n# 验证与性能分析\n## Matlab GUI操作界面\n使用的是**MATLAB GUI可视化仿真平台**。它是采用图形方式显示的计算机操作用户界面，是MATLAB用户可视化交互式的工具，运用GUI生成的操作界面用户可以不用浏览繁冗的代码而进行操作。如图是设计的**GUI操作界面**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322121557542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70)\n***看到这个界面是不是很不错，对的。。。你没看错MATLAB GUI确实是这么厉害。。。。。。。***\n## 普通行列置乱加密实现\nLena原图像、加密图像、解密图像\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322121749624.png)\nBaboon原图像、加密图像、解密图像\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322121818930.png)\n## 像素点的RGB值的缩放加密实现\nLena原图像、加密图像、解密图像\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322121940411.png)\nBaboon原图像、加密图像、解密图像\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020032212200941.png)\n## 混沌Logistic映射加密实现\nLena原图像、加密图像、解密图像\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322122101398.png)\nBaboon原图像、加密图像、解密图像\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020032212213175.png)\n## 直方图性能分析\n\n> 这里就只对lena图进行直方图分析，Baboon图大致和lena图一样。\n\n\nLena图的普通置乱与混沌Logistic加密的直方图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322122315134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70)\n普通行列置乱图像的直方图与原始图像的直方图相同，且像素点的分布都不均匀，而混沌Logistic加密图像的直方图的像素点分布相对均匀，很好地隐藏了原始图像的统计特性，达到了图像加密的效果。\n\nLena图的像素点的RGB缩放与混沌Logistic加密的直方图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322125400671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70)\n由直方图可知：像素点的RGB缩放图像的直方图与原始图像的直方图不相同且像素点的分布都不均匀，而混沌Logistic加密图像的直方图的像素点分布相对均匀，很好地隐藏了原始图像的统计特性。\n\n\n完整代码以上传至我的github：[完整代码](https://github.com/gain-wyj/-Logistic-)\n\n> ***你的三连击是我的荣幸！！！！！***\n\n","source":"_posts/基于混沌Logistic加密算法的图片加密与还原.md","raw":"---\ntitle: 基于混沌Logistic加密算法的图片加密与还原\ndate: 2020-12-01 08:12:04\ntags: \n- Logistic加密\n- matlab\n- 数字图像处理\ncategories: \n- 数字图像处理\n---\n\n# 摘要\n\n> 一种基于混沌Logistic加密算法的图片加密与还原的方法，并利用Lena图和Baboon图来验证这种加密算法的加密效果。为了能够体现该算法在图片信息加密的效果，本文还采用了普通行列置乱加密算法和像素点的RGB的值的缩放算法这两种算法对相同的图片的图片进行处理，利用matlab通过显示加密过后的图片以及直方图分析可以很直观的发现混沌Logistic加密算法对图片信息加密的效果更好，并且很好地隐藏了原始图像的统计特性，能够有效地抵御基于图像像素值的统计攻击，达到了图像加密的效果。\n\n# 混沌Logistic映射的理论\n\n## 混沌的基本概念\n\n1975年，美国数学家约克和美籍华人李天岩发表了《周期3意味着混沌》的文章，首次提出了“混沌”—词，阐述了混沌的数学定义，对混沌学的发展具有重大意义。自此以后，混沌研究开始蓬勃发展。\n混沌是指在确定性动力学系统中，由于对初值敏感而表现出的类似随机的、不可预测的运动。混沌是确定的非线性系统中出现的内在随机性现象，其变化并非随机确貌似随机。\n\n## Logistic映射方程\n\nLogistic映射是一个典型的非线性的迭代方程，如式所示：\n                               ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322115202600.png)\n称为Logistic映射的控制参数，对任意的k有![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322115314240.png)，其中k为迭代时间步。==Logistic映射的动态行为与控制参数u密切相关==，对于不同的u值系统将呈现不同的特性（即当k趋于无穷大，xk的变化情况）。其中==Logistic映射有两个主要的参数，一个是初值x0，一个是系统参数μ==，研究表明，==当 0<μ<=3.5699456时，Logistic呈现出周期性；而当映射方程满足0<x0<1和3.5699456<μ<=4这两个条件时，Logistic映射处于混沌状态==，即一种无序的、不可预测的、混乱的、摸不到头、摸不到尾的状态。对给定的初始值x0，生成的序列是非周期性、非收敛以及对初始条件敏感的。\n\n> 有界性\n混沌是有界的，它的运动轨线始终局限于一个确定的区域，这个区域称为混沌吸引域。由图 所示，无论控制参数μ怎么变，迭代值xn始终在(0,1)之间。\n\n![**不同控制参数μ下的Logistic分岔图**](https://img-blog.csdnimg.cn/20200322120312766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70)\n\n# 混沌Logistic映射与其他加密算法介绍\n\n## 普通行列置乱加密算法\n\n### 普通置乱加密算法的流程\n\n将读入的水印图片，先获取图片的大小，得到原始图片矩阵，首先随机打乱各行，输出打乱后的矩阵，再将这个矩阵随机打乱各列，最后图像成功加密，显示加密图像。算法流程框图如图：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322120508960.png)\n\n### 算法分析\n\n```\ns = size(handles.img);\nr = randsample(s(1), s(1)); \nRGBS = handles.img(r, :, :);\nc = randsample(s(2), s(2)); \nRGBSS = RGBS(:, c, :);\naxes(handles.axes2);        \nimshow(RGBSS); \ntitle('普通置乱加密图像');\nfigure(2);\nhist_im=histogram(RGBSS); %加密后直方图\ntitle('普通置乱加密直方图');\n```\n\n## 像素点的RGB值缩放加密\n\n### 像素点的RGB值缩放加密算法的流程\n\n首先读入原始图片，通过size获取水印图片的大小矩阵，接着获取图片各R、G、B的值，然后将获取到的RGB值分别扩大20倍并将值赋给r，最后再将r与将水印图片转换成double类型的矩阵进行点乘运算实现图像的成功加密。算法流程框图如图：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322120755105.png)\n\n### 算法分析\n\n```\ns = size(handles.img);\nr = rand(s(1), s(2), s(3)) * 20;\nRGBD = im2double(handles.img);\nRGB_jiami = RGBD .* r;\naxes(handles.axes2);      \nimshow(RGB_jiami); \ntitle('像素点的RGB值缩放加密图像');\nfigure(3);\nhist_im=histogram(RGB_jiami); \ntitle('像素点的RGB值缩放加密直方图');\n```\n\n## 混沌Logistic映射加密算法\n\n### 混沌Logistic映射加密算法模型\n\n读入待处理的原始图片，通过加密密钥进入混沌序列，通过混沌系统设计加密算法，实现加密目的；再输入解密密钥，把加密过程逆向运算即可得到解密图像。系统参数u和初值x0设置成密钥。混沌Logistic映射加密算法模型如图：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322121024286.png)\n\n当迭代n次后，我们就得到了x1、x2、…，xn这n个值，这就是一个混沌序列，是一维的，称作序列A，也就是我们想要得到的序列，在MATLAB中，可以看出xi（i=1,2,…,n）的取值是在(0,1)之间的，就像图像灰度值是在(0,255)之间一样。那么我们把这个一维序列归一化到(0,255)之间得到序列B。异或过程如图：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322121130568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70)\n\n### 算法分析\n```  \nu=4;   \nfor i=1:500 \n    x=u*x*(1-x); \nend \nfprintf('x(k+1)=%d\\n',x); \nA=zeros(1,M*N); \nA(1)=x;   \nfor i=1:M*N-1 \n    A(i+1)=u*A(i)*(1-A(i)); \nend\nB=uint8(255*A); %\nImgn=reshape(B,M,N);   \nC=zeros(M,N); \nfor x=1:M \n    for y=1:N \n        C(x,y)=handles.img(x,y); \n    end\nend\nC; \nD=uint8(C); \nRod=bitxor(D,Imgn); \nRod; \nrod=reshape(Rod,M,N/3,3); \n```\n\n# 验证与性能分析\n## Matlab GUI操作界面\n使用的是**MATLAB GUI可视化仿真平台**。它是采用图形方式显示的计算机操作用户界面，是MATLAB用户可视化交互式的工具，运用GUI生成的操作界面用户可以不用浏览繁冗的代码而进行操作。如图是设计的**GUI操作界面**\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322121557542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70)\n***看到这个界面是不是很不错，对的。。。你没看错MATLAB GUI确实是这么厉害。。。。。。。***\n## 普通行列置乱加密实现\nLena原图像、加密图像、解密图像\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322121749624.png)\nBaboon原图像、加密图像、解密图像\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322121818930.png)\n## 像素点的RGB值的缩放加密实现\nLena原图像、加密图像、解密图像\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322121940411.png)\nBaboon原图像、加密图像、解密图像\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020032212200941.png)\n## 混沌Logistic映射加密实现\nLena原图像、加密图像、解密图像\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322122101398.png)\nBaboon原图像、加密图像、解密图像\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2020032212213175.png)\n## 直方图性能分析\n\n> 这里就只对lena图进行直方图分析，Baboon图大致和lena图一样。\n\n\nLena图的普通置乱与混沌Logistic加密的直方图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322122315134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70)\n普通行列置乱图像的直方图与原始图像的直方图相同，且像素点的分布都不均匀，而混沌Logistic加密图像的直方图的像素点分布相对均匀，很好地隐藏了原始图像的统计特性，达到了图像加密的效果。\n\nLena图的像素点的RGB缩放与混沌Logistic加密的直方图\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200322125400671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70)\n由直方图可知：像素点的RGB缩放图像的直方图与原始图像的直方图不相同且像素点的分布都不均匀，而混沌Logistic加密图像的直方图的像素点分布相对均匀，很好地隐藏了原始图像的统计特性。\n\n\n完整代码以上传至我的github：[完整代码](https://github.com/gain-wyj/-Logistic-)\n\n> ***你的三连击是我的荣幸！！！！！***\n\n","slug":"基于混沌Logistic加密算法的图片加密与还原","published":1,"updated":"2020-12-01T07:19:03.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki8tmm4h0009v8vb6lx22sbm","content":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><blockquote>\n<p>一种基于混沌Logistic加密算法的图片加密与还原的方法，并利用Lena图和Baboon图来验证这种加密算法的加密效果。为了能够体现该算法在图片信息加密的效果，本文还采用了普通行列置乱加密算法和像素点的RGB的值的缩放算法这两种算法对相同的图片的图片进行处理，利用matlab通过显示加密过后的图片以及直方图分析可以很直观的发现混沌Logistic加密算法对图片信息加密的效果更好，并且很好地隐藏了原始图像的统计特性，能够有效地抵御基于图像像素值的统计攻击，达到了图像加密的效果。</p>\n</blockquote>\n<h1 id=\"混沌Logistic映射的理论\"><a href=\"#混沌Logistic映射的理论\" class=\"headerlink\" title=\"混沌Logistic映射的理论\"></a>混沌Logistic映射的理论</h1><h2 id=\"混沌的基本概念\"><a href=\"#混沌的基本概念\" class=\"headerlink\" title=\"混沌的基本概念\"></a>混沌的基本概念</h2><p>1975年，美国数学家约克和美籍华人李天岩发表了《周期3意味着混沌》的文章，首次提出了“混沌”—词，阐述了混沌的数学定义，对混沌学的发展具有重大意义。自此以后，混沌研究开始蓬勃发展。<br>混沌是指在确定性动力学系统中，由于对初值敏感而表现出的类似随机的、不可预测的运动。混沌是确定的非线性系统中出现的内在随机性现象，其变化并非随机确貌似随机。</p>\n<h2 id=\"Logistic映射方程\"><a href=\"#Logistic映射方程\" class=\"headerlink\" title=\"Logistic映射方程\"></a>Logistic映射方程</h2><p>Logistic映射是一个典型的非线性的迭代方程，如式所示：<br>                               <img src=\"https://img-blog.csdnimg.cn/20200322115202600.png\" alt=\"在这里插入图片描述\"><br>称为Logistic映射的控制参数，对任意的k有<img src=\"https://img-blog.csdnimg.cn/20200322115314240.png\" alt=\"在这里插入图片描述\">，其中k为迭代时间步。==Logistic映射的动态行为与控制参数u密切相关==，对于不同的u值系统将呈现不同的特性（即当k趋于无穷大，xk的变化情况）。其中==Logistic映射有两个主要的参数，一个是初值x0，一个是系统参数μ==，研究表明，==当 0&lt;μ&lt;=3.5699456时，Logistic呈现出周期性；而当映射方程满足0&lt;x0&lt;1和3.5699456&lt;μ&lt;=4这两个条件时，Logistic映射处于混沌状态==，即一种无序的、不可预测的、混乱的、摸不到头、摸不到尾的状态。对给定的初始值x0，生成的序列是非周期性、非收敛以及对初始条件敏感的。</p>\n<blockquote>\n<p>有界性<br>混沌是有界的，它的运动轨线始终局限于一个确定的区域，这个区域称为混沌吸引域。由图 所示，无论控制参数μ怎么变，迭代值xn始终在(0,1)之间。</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20200322120312766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70\" alt=\"**不同控制参数μ下的Logistic分岔图**\"></p>\n<h1 id=\"混沌Logistic映射与其他加密算法介绍\"><a href=\"#混沌Logistic映射与其他加密算法介绍\" class=\"headerlink\" title=\"混沌Logistic映射与其他加密算法介绍\"></a>混沌Logistic映射与其他加密算法介绍</h1><h2 id=\"普通行列置乱加密算法\"><a href=\"#普通行列置乱加密算法\" class=\"headerlink\" title=\"普通行列置乱加密算法\"></a>普通行列置乱加密算法</h2><h3 id=\"普通置乱加密算法的流程\"><a href=\"#普通置乱加密算法的流程\" class=\"headerlink\" title=\"普通置乱加密算法的流程\"></a>普通置乱加密算法的流程</h3><p>将读入的水印图片，先获取图片的大小，得到原始图片矩阵，首先随机打乱各行，输出打乱后的矩阵，再将这个矩阵随机打乱各列，最后图像成功加密，显示加密图像。算法流程框图如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200322120508960.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h3><pre><code>s = size(handles.img);\nr = randsample(s(1), s(1)); \nRGBS = handles.img(r, :, :);\nc = randsample(s(2), s(2)); \nRGBSS = RGBS(:, c, :);\naxes(handles.axes2);        \nimshow(RGBSS); \ntitle(&#39;普通置乱加密图像&#39;);\nfigure(2);\nhist_im=histogram(RGBSS); %加密后直方图\ntitle(&#39;普通置乱加密直方图&#39;);</code></pre><h2 id=\"像素点的RGB值缩放加密\"><a href=\"#像素点的RGB值缩放加密\" class=\"headerlink\" title=\"像素点的RGB值缩放加密\"></a>像素点的RGB值缩放加密</h2><h3 id=\"像素点的RGB值缩放加密算法的流程\"><a href=\"#像素点的RGB值缩放加密算法的流程\" class=\"headerlink\" title=\"像素点的RGB值缩放加密算法的流程\"></a>像素点的RGB值缩放加密算法的流程</h3><p>首先读入原始图片，通过size获取水印图片的大小矩阵，接着获取图片各R、G、B的值，然后将获取到的RGB值分别扩大20倍并将值赋给r，最后再将r与将水印图片转换成double类型的矩阵进行点乘运算实现图像的成功加密。算法流程框图如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200322120755105.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"算法分析-1\"><a href=\"#算法分析-1\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h3><pre><code>s = size(handles.img);\nr = rand(s(1), s(2), s(3)) * 20;\nRGBD = im2double(handles.img);\nRGB_jiami = RGBD .* r;\naxes(handles.axes2);      \nimshow(RGB_jiami); \ntitle(&#39;像素点的RGB值缩放加密图像&#39;);\nfigure(3);\nhist_im=histogram(RGB_jiami); \ntitle(&#39;像素点的RGB值缩放加密直方图&#39;);</code></pre><h2 id=\"混沌Logistic映射加密算法\"><a href=\"#混沌Logistic映射加密算法\" class=\"headerlink\" title=\"混沌Logistic映射加密算法\"></a>混沌Logistic映射加密算法</h2><h3 id=\"混沌Logistic映射加密算法模型\"><a href=\"#混沌Logistic映射加密算法模型\" class=\"headerlink\" title=\"混沌Logistic映射加密算法模型\"></a>混沌Logistic映射加密算法模型</h3><p>读入待处理的原始图片，通过加密密钥进入混沌序列，通过混沌系统设计加密算法，实现加密目的；再输入解密密钥，把加密过程逆向运算即可得到解密图像。系统参数u和初值x0设置成密钥。混沌Logistic映射加密算法模型如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200322121024286.png\" alt=\"在这里插入图片描述\"></p>\n<p>当迭代n次后，我们就得到了x1、x2、…，xn这n个值，这就是一个混沌序列，是一维的，称作序列A，也就是我们想要得到的序列，在MATLAB中，可以看出xi（i=1,2,…,n）的取值是在(0,1)之间的，就像图像灰度值是在(0,255)之间一样。那么我们把这个一维序列归一化到(0,255)之间得到序列B。异或过程如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200322121130568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"算法分析-2\"><a href=\"#算法分析-2\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h3><pre><code>u=4;   \nfor i=1:500 \n    x=u*x*(1-x); \nend \nfprintf(&#39;x(k+1)=%d\\n&#39;,x); \nA=zeros(1,M*N); \nA(1)=x;   \nfor i=1:M*N-1 \n    A(i+1)=u*A(i)*(1-A(i)); \nend\nB=uint8(255*A); %\nImgn=reshape(B,M,N);   \nC=zeros(M,N); \nfor x=1:M \n    for y=1:N \n        C(x,y)=handles.img(x,y); \n    end\nend\nC; \nD=uint8(C); \nRod=bitxor(D,Imgn); \nRod; \nrod=reshape(Rod,M,N/3,3); </code></pre><h1 id=\"验证与性能分析\"><a href=\"#验证与性能分析\" class=\"headerlink\" title=\"验证与性能分析\"></a>验证与性能分析</h1><h2 id=\"Matlab-GUI操作界面\"><a href=\"#Matlab-GUI操作界面\" class=\"headerlink\" title=\"Matlab GUI操作界面\"></a>Matlab GUI操作界面</h2><p>使用的是<strong>MATLAB GUI可视化仿真平台</strong>。它是采用图形方式显示的计算机操作用户界面，是MATLAB用户可视化交互式的工具，运用GUI生成的操作界面用户可以不用浏览繁冗的代码而进行操作。如图是设计的<strong>GUI操作界面</strong><br><img src=\"https://img-blog.csdnimg.cn/20200322121557542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong><em>看到这个界面是不是很不错，对的。。。你没看错MATLAB GUI确实是这么厉害。。。。。。。</em></strong></p>\n<h2 id=\"普通行列置乱加密实现\"><a href=\"#普通行列置乱加密实现\" class=\"headerlink\" title=\"普通行列置乱加密实现\"></a>普通行列置乱加密实现</h2><p>Lena原图像、加密图像、解密图像<br><img src=\"https://img-blog.csdnimg.cn/20200322121749624.png\" alt=\"在这里插入图片描述\"><br>Baboon原图像、加密图像、解密图像<br><img src=\"https://img-blog.csdnimg.cn/20200322121818930.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"像素点的RGB值的缩放加密实现\"><a href=\"#像素点的RGB值的缩放加密实现\" class=\"headerlink\" title=\"像素点的RGB值的缩放加密实现\"></a>像素点的RGB值的缩放加密实现</h2><p>Lena原图像、加密图像、解密图像<br><img src=\"https://img-blog.csdnimg.cn/20200322121940411.png\" alt=\"在这里插入图片描述\"><br>Baboon原图像、加密图像、解密图像<br><img src=\"https://img-blog.csdnimg.cn/2020032212200941.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"混沌Logistic映射加密实现\"><a href=\"#混沌Logistic映射加密实现\" class=\"headerlink\" title=\"混沌Logistic映射加密实现\"></a>混沌Logistic映射加密实现</h2><p>Lena原图像、加密图像、解密图像<br><img src=\"https://img-blog.csdnimg.cn/20200322122101398.png\" alt=\"在这里插入图片描述\"><br>Baboon原图像、加密图像、解密图像<br><img src=\"https://img-blog.csdnimg.cn/2020032212213175.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"直方图性能分析\"><a href=\"#直方图性能分析\" class=\"headerlink\" title=\"直方图性能分析\"></a>直方图性能分析</h2><blockquote>\n<p>这里就只对lena图进行直方图分析，Baboon图大致和lena图一样。</p>\n</blockquote>\n<p>Lena图的普通置乱与混沌Logistic加密的直方图<br><img src=\"https://img-blog.csdnimg.cn/20200322122315134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>普通行列置乱图像的直方图与原始图像的直方图相同，且像素点的分布都不均匀，而混沌Logistic加密图像的直方图的像素点分布相对均匀，很好地隐藏了原始图像的统计特性，达到了图像加密的效果。</p>\n<p>Lena图的像素点的RGB缩放与混沌Logistic加密的直方图<br><img src=\"https://img-blog.csdnimg.cn/20200322125400671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>由直方图可知：像素点的RGB缩放图像的直方图与原始图像的直方图不相同且像素点的分布都不均匀，而混沌Logistic加密图像的直方图的像素点分布相对均匀，很好地隐藏了原始图像的统计特性。</p>\n<p>完整代码以上传至我的github：<a href=\"https://github.com/gain-wyj/-Logistic-\" target=\"_blank\" rel=\"noopener\">完整代码</a></p>\n<blockquote>\n<p><strong><em>你的三连击是我的荣幸！！！！！</em></strong></p>\n</blockquote>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><blockquote>\n<p>一种基于混沌Logistic加密算法的图片加密与还原的方法，并利用Lena图和Baboon图来验证这种加密算法的加密效果。为了能够体现该算法在图片信息加密的效果，本文还采用了普通行列置乱加密算法和像素点的RGB的值的缩放算法这两种算法对相同的图片的图片进行处理，利用matlab通过显示加密过后的图片以及直方图分析可以很直观的发现混沌Logistic加密算法对图片信息加密的效果更好，并且很好地隐藏了原始图像的统计特性，能够有效地抵御基于图像像素值的统计攻击，达到了图像加密的效果。</p>\n</blockquote>\n<h1 id=\"混沌Logistic映射的理论\"><a href=\"#混沌Logistic映射的理论\" class=\"headerlink\" title=\"混沌Logistic映射的理论\"></a>混沌Logistic映射的理论</h1><h2 id=\"混沌的基本概念\"><a href=\"#混沌的基本概念\" class=\"headerlink\" title=\"混沌的基本概念\"></a>混沌的基本概念</h2><p>1975年，美国数学家约克和美籍华人李天岩发表了《周期3意味着混沌》的文章，首次提出了“混沌”—词，阐述了混沌的数学定义，对混沌学的发展具有重大意义。自此以后，混沌研究开始蓬勃发展。<br>混沌是指在确定性动力学系统中，由于对初值敏感而表现出的类似随机的、不可预测的运动。混沌是确定的非线性系统中出现的内在随机性现象，其变化并非随机确貌似随机。</p>\n<h2 id=\"Logistic映射方程\"><a href=\"#Logistic映射方程\" class=\"headerlink\" title=\"Logistic映射方程\"></a>Logistic映射方程</h2><p>Logistic映射是一个典型的非线性的迭代方程，如式所示：<br>                               <img src=\"https://img-blog.csdnimg.cn/20200322115202600.png\" alt=\"在这里插入图片描述\"><br>称为Logistic映射的控制参数，对任意的k有<img src=\"https://img-blog.csdnimg.cn/20200322115314240.png\" alt=\"在这里插入图片描述\">，其中k为迭代时间步。==Logistic映射的动态行为与控制参数u密切相关==，对于不同的u值系统将呈现不同的特性（即当k趋于无穷大，xk的变化情况）。其中==Logistic映射有两个主要的参数，一个是初值x0，一个是系统参数μ==，研究表明，==当 0&lt;μ&lt;=3.5699456时，Logistic呈现出周期性；而当映射方程满足0&lt;x0&lt;1和3.5699456&lt;μ&lt;=4这两个条件时，Logistic映射处于混沌状态==，即一种无序的、不可预测的、混乱的、摸不到头、摸不到尾的状态。对给定的初始值x0，生成的序列是非周期性、非收敛以及对初始条件敏感的。</p>\n<blockquote>\n<p>有界性<br>混沌是有界的，它的运动轨线始终局限于一个确定的区域，这个区域称为混沌吸引域。由图 所示，无论控制参数μ怎么变，迭代值xn始终在(0,1)之间。</p>\n</blockquote>\n<p><img src=\"https://img-blog.csdnimg.cn/20200322120312766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70\" alt=\"**不同控制参数μ下的Logistic分岔图**\"></p>\n<h1 id=\"混沌Logistic映射与其他加密算法介绍\"><a href=\"#混沌Logistic映射与其他加密算法介绍\" class=\"headerlink\" title=\"混沌Logistic映射与其他加密算法介绍\"></a>混沌Logistic映射与其他加密算法介绍</h1><h2 id=\"普通行列置乱加密算法\"><a href=\"#普通行列置乱加密算法\" class=\"headerlink\" title=\"普通行列置乱加密算法\"></a>普通行列置乱加密算法</h2><h3 id=\"普通置乱加密算法的流程\"><a href=\"#普通置乱加密算法的流程\" class=\"headerlink\" title=\"普通置乱加密算法的流程\"></a>普通置乱加密算法的流程</h3><p>将读入的水印图片，先获取图片的大小，得到原始图片矩阵，首先随机打乱各行，输出打乱后的矩阵，再将这个矩阵随机打乱各列，最后图像成功加密，显示加密图像。算法流程框图如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200322120508960.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h3><pre><code>s = size(handles.img);\nr = randsample(s(1), s(1)); \nRGBS = handles.img(r, :, :);\nc = randsample(s(2), s(2)); \nRGBSS = RGBS(:, c, :);\naxes(handles.axes2);        \nimshow(RGBSS); \ntitle(&#39;普通置乱加密图像&#39;);\nfigure(2);\nhist_im=histogram(RGBSS); %加密后直方图\ntitle(&#39;普通置乱加密直方图&#39;);</code></pre><h2 id=\"像素点的RGB值缩放加密\"><a href=\"#像素点的RGB值缩放加密\" class=\"headerlink\" title=\"像素点的RGB值缩放加密\"></a>像素点的RGB值缩放加密</h2><h3 id=\"像素点的RGB值缩放加密算法的流程\"><a href=\"#像素点的RGB值缩放加密算法的流程\" class=\"headerlink\" title=\"像素点的RGB值缩放加密算法的流程\"></a>像素点的RGB值缩放加密算法的流程</h3><p>首先读入原始图片，通过size获取水印图片的大小矩阵，接着获取图片各R、G、B的值，然后将获取到的RGB值分别扩大20倍并将值赋给r，最后再将r与将水印图片转换成double类型的矩阵进行点乘运算实现图像的成功加密。算法流程框图如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200322120755105.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"算法分析-1\"><a href=\"#算法分析-1\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h3><pre><code>s = size(handles.img);\nr = rand(s(1), s(2), s(3)) * 20;\nRGBD = im2double(handles.img);\nRGB_jiami = RGBD .* r;\naxes(handles.axes2);      \nimshow(RGB_jiami); \ntitle(&#39;像素点的RGB值缩放加密图像&#39;);\nfigure(3);\nhist_im=histogram(RGB_jiami); \ntitle(&#39;像素点的RGB值缩放加密直方图&#39;);</code></pre><h2 id=\"混沌Logistic映射加密算法\"><a href=\"#混沌Logistic映射加密算法\" class=\"headerlink\" title=\"混沌Logistic映射加密算法\"></a>混沌Logistic映射加密算法</h2><h3 id=\"混沌Logistic映射加密算法模型\"><a href=\"#混沌Logistic映射加密算法模型\" class=\"headerlink\" title=\"混沌Logistic映射加密算法模型\"></a>混沌Logistic映射加密算法模型</h3><p>读入待处理的原始图片，通过加密密钥进入混沌序列，通过混沌系统设计加密算法，实现加密目的；再输入解密密钥，把加密过程逆向运算即可得到解密图像。系统参数u和初值x0设置成密钥。混沌Logistic映射加密算法模型如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200322121024286.png\" alt=\"在这里插入图片描述\"></p>\n<p>当迭代n次后，我们就得到了x1、x2、…，xn这n个值，这就是一个混沌序列，是一维的，称作序列A，也就是我们想要得到的序列，在MATLAB中，可以看出xi（i=1,2,…,n）的取值是在(0,1)之间的，就像图像灰度值是在(0,255)之间一样。那么我们把这个一维序列归一化到(0,255)之间得到序列B。异或过程如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200322121130568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"算法分析-2\"><a href=\"#算法分析-2\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h3><pre><code>u=4;   \nfor i=1:500 \n    x=u*x*(1-x); \nend \nfprintf(&#39;x(k+1)=%d\\n&#39;,x); \nA=zeros(1,M*N); \nA(1)=x;   \nfor i=1:M*N-1 \n    A(i+1)=u*A(i)*(1-A(i)); \nend\nB=uint8(255*A); %\nImgn=reshape(B,M,N);   \nC=zeros(M,N); \nfor x=1:M \n    for y=1:N \n        C(x,y)=handles.img(x,y); \n    end\nend\nC; \nD=uint8(C); \nRod=bitxor(D,Imgn); \nRod; \nrod=reshape(Rod,M,N/3,3); </code></pre><h1 id=\"验证与性能分析\"><a href=\"#验证与性能分析\" class=\"headerlink\" title=\"验证与性能分析\"></a>验证与性能分析</h1><h2 id=\"Matlab-GUI操作界面\"><a href=\"#Matlab-GUI操作界面\" class=\"headerlink\" title=\"Matlab GUI操作界面\"></a>Matlab GUI操作界面</h2><p>使用的是<strong>MATLAB GUI可视化仿真平台</strong>。它是采用图形方式显示的计算机操作用户界面，是MATLAB用户可视化交互式的工具，运用GUI生成的操作界面用户可以不用浏览繁冗的代码而进行操作。如图是设计的<strong>GUI操作界面</strong><br><img src=\"https://img-blog.csdnimg.cn/20200322121557542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><strong><em>看到这个界面是不是很不错，对的。。。你没看错MATLAB GUI确实是这么厉害。。。。。。。</em></strong></p>\n<h2 id=\"普通行列置乱加密实现\"><a href=\"#普通行列置乱加密实现\" class=\"headerlink\" title=\"普通行列置乱加密实现\"></a>普通行列置乱加密实现</h2><p>Lena原图像、加密图像、解密图像<br><img src=\"https://img-blog.csdnimg.cn/20200322121749624.png\" alt=\"在这里插入图片描述\"><br>Baboon原图像、加密图像、解密图像<br><img src=\"https://img-blog.csdnimg.cn/20200322121818930.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"像素点的RGB值的缩放加密实现\"><a href=\"#像素点的RGB值的缩放加密实现\" class=\"headerlink\" title=\"像素点的RGB值的缩放加密实现\"></a>像素点的RGB值的缩放加密实现</h2><p>Lena原图像、加密图像、解密图像<br><img src=\"https://img-blog.csdnimg.cn/20200322121940411.png\" alt=\"在这里插入图片描述\"><br>Baboon原图像、加密图像、解密图像<br><img src=\"https://img-blog.csdnimg.cn/2020032212200941.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"混沌Logistic映射加密实现\"><a href=\"#混沌Logistic映射加密实现\" class=\"headerlink\" title=\"混沌Logistic映射加密实现\"></a>混沌Logistic映射加密实现</h2><p>Lena原图像、加密图像、解密图像<br><img src=\"https://img-blog.csdnimg.cn/20200322122101398.png\" alt=\"在这里插入图片描述\"><br>Baboon原图像、加密图像、解密图像<br><img src=\"https://img-blog.csdnimg.cn/2020032212213175.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"直方图性能分析\"><a href=\"#直方图性能分析\" class=\"headerlink\" title=\"直方图性能分析\"></a>直方图性能分析</h2><blockquote>\n<p>这里就只对lena图进行直方图分析，Baboon图大致和lena图一样。</p>\n</blockquote>\n<p>Lena图的普通置乱与混沌Logistic加密的直方图<br><img src=\"https://img-blog.csdnimg.cn/20200322122315134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>普通行列置乱图像的直方图与原始图像的直方图相同，且像素点的分布都不均匀，而混沌Logistic加密图像的直方图的像素点分布相对均匀，很好地隐藏了原始图像的统计特性，达到了图像加密的效果。</p>\n<p>Lena图的像素点的RGB缩放与混沌Logistic加密的直方图<br><img src=\"https://img-blog.csdnimg.cn/20200322125400671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>由直方图可知：像素点的RGB缩放图像的直方图与原始图像的直方图不相同且像素点的分布都不均匀，而混沌Logistic加密图像的直方图的像素点分布相对均匀，很好地隐藏了原始图像的统计特性。</p>\n<p>完整代码以上传至我的github：<a href=\"https://github.com/gain-wyj/-Logistic-\" target=\"_blank\" rel=\"noopener\">完整代码</a></p>\n<blockquote>\n<p><strong><em>你的三连击是我的荣幸！！！！！</em></strong></p>\n</blockquote>\n"},{"title":"数学分析模型（一）：数据的无量纲处理方法及示例（附完整代码）","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-12-01T06:27:36.000Z","password":null,"summary":"数据标准化处理主要包括同趋化处理和无量纲化处理两个方面。数据的同趋化处理主要解决不同性质的数据问题，对不同性质指标直接累加不能正确反应不同作用力的综合结果，须先考虑改变逆指标数据性质，使所有指标对评价体系的作用力同趋化。数据无量纲化主要解决数据的不可比性，在此处主要介绍几种数据的无量纲化的处理方式。","_content":"\n\n在对实际问题建模过程中，特别是在建立指标评价体系时，常常会面临不同类型的数据处理及融合。而各个指标之间由于计量单位和数量级的不尽相同，从而使得各指标间不具有可比性。在数据分析之前，通常需要先将数据标准化，利用标准化后的数据进行分析。数据标准化处理主要包括同趋化处理和无量纲化处理两个方面。数据的同趋化处理主要解决不同性质的数据问题，对不同性质指标直接累加不能正确反应不同作用力的综合结果，须先考虑改变逆指标数据性质，使所有指标对评价体系的作用力同趋化。数据无量纲化主要解决数据的不可比性，在此处主要介绍几种数据的无量纲化的处理方式。\n# （1）极值化方法\n可以选择如下的三种方式：\n（A）![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501113123953.png)即每一个变量除以该变量取值的全距，标准化后的每个变量的取值范围限于[-1,1]。\n(B) ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501113147271.png)即每一个变量与变量最小值之差除以该变量取值的全距，标准化后各变量的取值范围限于[0,1]。 \n(C）![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501113205125.png) ，即每一个变量值除以该变量取值的最大值，标准化后使变量的最大取值为1。\n \n采用极值化方法对变量数据无量纲化是通过变量取值的最大值和最小值将原始数据转换为界于某一特定范围的数据，从而消除量纲和数量级的影响。由于极值化方法对变量无量纲化过程中仅仅对该变量的最大值和最小值这两个极端值有关，而与其他取值无关，这使得该方法在改变各变量权重时过分依赖两个极端取值。\n\n# （2）标准化方法\n利用![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501113333257.png)来计算，即每一个变量值与其平均值之差除以该变量的标准差，无量纲化后各变量的平均值为0，标准差为1，从而消除量纲和数量级的影响。虽然该方法在无量纲化过程中利用了所有的数据信息，但是该方法在无量纲化后不仅使得转换后的各变量均值相同，且标准差也相同，即无量纲化的同时还消除了各变量在变异程度上的差异。\n\n# （3）均值化方法\n计算公式为：![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501113415384.png)，该方法在消除量纲和数量级影响的同时，保留了各变量取值差异程度上的信息。\n（4）标准差化方法\n计算公式为：![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501113444104.png)。该方法是标准化方法的基础上的一种变形，两者的差别仅在无量纲化后各变量的均值上，标准化方法处理后各变量的均值为0，而标准差化方法处理后各变量均值为原始变量均值与标准差的比值。\n\n综上所述，针对不同类型的数据，可以选择相应的无量纲化方法。如下的示例就是一个典型的评价体系中无量纲化的范例。\n\n# 示例\n\n近年来我国淡水湖水质富营养化的污染日益严重，如何对湖泊水质的富营养化进行综合评价与治理是摆在我们面前的任务，下面两个表格分别为我国5个湖泊的实测数据和湖泊水质评价标准。\n\n表1  全国五个主要湖泊评价参数的实测数据\n![全国五个主要湖泊评价参数的实测数据](https://img-blog.csdnimg.cn/20200501113549269.png)\n表2  湖泊水质评价标准\n![湖泊水质评价标准](https://img-blog.csdnimg.cn/20200501113628784.png)\n## 要求\n（1）试用以上数据，分析总磷，耗氧量，透明度，总氨这4个指标对湖泊水质评价富营养化的作用。\n（2）对这5个湖泊的水质综合评价，确定水质等级。\n\n在进行综合评价之前，首先要对评价的指标进行分析。通常评价指标分成效益型，成本型和固定型指标。效益型指标是指那些数值越大影响力越大的统计指标（也称正向型指标）；成本型指标是指数值越小越好的指标（也称逆向型指标）；而固定型指标是指数值越接近于某个常数越好的指标（也称适度型指标）。如果每个评价指标的属性不一样，则在综合评价时就容易发生偏差，必须先对各评价指标统一属性。\n## 建模步骤\n（ⅰ）建立无量纲化实测数据矩阵和评价标准矩阵，其中实测数据矩阵和等级标准矩阵如下，\n![实测数据矩阵和等级标准矩阵](https://img-blog.csdnimg.cn/20200501113736824.png)\n然后建立无量纲化实测数据矩阵和无量纲化等级标准矩阵，其中\n![a和b](https://img-blog.csdnimg.cn/20200501113756112.png)\n得到\n![A](https://img-blog.csdnimg.cn/20200501114209393.png)\n\n![B](https://img-blog.csdnimg.cn/20200501114201749.png)\n\n（ⅱ）计算各评价指标的权重\n计算矩阵B的各行向量的均值和标准差，\n![均值和标准差](https://img-blog.csdnimg.cn/20200501114144147.png)\n\n然后计算变异系数![变异系数](https://img-blog.csdnimg.cn/20200501114223682.png)\n最后对变异系数归一化得到各指标的权重为\n![指标的权重](https://img-blog.csdnimg.cn/20200501114336124.png)\n（ⅲ）建立各湖泊水质的综合评价模型\n通常可以利用向量之间的距离来衡量两个向量之间的接近程度，在Matlab中，有以下的函数命令来计算向量之间的距离；\ndist(w,p): 计算中的每个行向量和中每个列向量之间的欧式距离；\nmandist(w,p): 绝对值距离。\n计算中各行向量到中各列向量之间的欧氏距离，\n![各列向量之间的欧氏距离](https://img-blog.csdnimg.cn/20200501114434381.png)\n若![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501114446171.png)，则第个湖泊属于第级。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501114457329.png)\n这说明杭州西湖，武汉东湖都属于极富营养水质，青海湖属于中营养水质，而巢湖和滇池属于富营养水质。\n\n同时也可以计算中各行向量到中各列向量之间的绝对值距离![在这里插入图片描述](https://img-blog.csdnimg.cn/202005011145144.png)\n若![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501114526659.png)，则第个湖泊属于第级。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501114535650.png)\n其评价结果与利用欧氏距离得到的评价结果完全一样。\n\n所以，从上面的计算可以看出，尽管欧氏距离和绝对值距离的意义完全不一样，但对湖泊水质的评价等级是一样的，这表明了方法的稳定性。\n\n# 程序\n\n```powershell\nX=[130 10.3 0.35 2.76;\n105 10.7 0.4 2;\n20 1.4 4.5 0.22\n30 6.26 0.25 1.67 ;\n20 10.13 0.5 0.23];\nA1=X(:,1)./130;\nA2=X(:,2)./10.7;\nA3=0.25./X(:,3);\nA4=X(:,4)./2.76;\nA=[A1 A2 A3 A4];\n\nY=[1 4 23 100 660;\n0.09 0.36 1.8 7.1 27.1;\n37 12 2.4 0.55 0.17;\n0.02 0.06 0.31 1.2 4.6];\nB1=Y(1,:)./660;\nB2=Y(2,:)./27.1;\nB3=0.17./Y(3,:);\nB4=Y(4,:)./4.6;\nB=[B1;B2;B3;B4];\n\n% dist是一个欧式距离加权函数，给一个输入使用权值，去获得加权的输入\n% dist(W,P)中：W——S×R的权值矩阵；P——R×Q的矩阵，表示Q个输入（列）向量\n% dist(w,p): 计算中的每个行向量和中每个列向量之间的欧式距离；\njd=dist(A,B);\njd\n% mandist(w,p): 绝对值距离\nmjd=mandist(A,B);\nmjd\n```\n# 结果\n![运行结果](https://img-blog.csdnimg.cn/20200501161822708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70)\n\n# 备注\n**各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！** \n\n**各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！**\n\n**各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！** ","source":"_posts/Dimensionless-processing-of-data.md","raw":"---\ntitle: 数学分析模型（一）：数据的无量纲处理方法及示例（附完整代码）\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-12-01 14:27:36\npassword:\nsummary: 数据标准化处理主要包括同趋化处理和无量纲化处理两个方面。数据的同趋化处理主要解决不同性质的数据问题，对不同性质指标直接累加不能正确反应不同作用力的综合结果，须先考虑改变逆指标数据性质，使所有指标对评价体系的作用力同趋化。数据无量纲化主要解决数据的不可比性，在此处主要介绍几种数据的无量纲化的处理方式。\ntags: \n- 数学分析模型\n- matlab\ncategories: \n- 数学建模\n---\n\n\n在对实际问题建模过程中，特别是在建立指标评价体系时，常常会面临不同类型的数据处理及融合。而各个指标之间由于计量单位和数量级的不尽相同，从而使得各指标间不具有可比性。在数据分析之前，通常需要先将数据标准化，利用标准化后的数据进行分析。数据标准化处理主要包括同趋化处理和无量纲化处理两个方面。数据的同趋化处理主要解决不同性质的数据问题，对不同性质指标直接累加不能正确反应不同作用力的综合结果，须先考虑改变逆指标数据性质，使所有指标对评价体系的作用力同趋化。数据无量纲化主要解决数据的不可比性，在此处主要介绍几种数据的无量纲化的处理方式。\n# （1）极值化方法\n可以选择如下的三种方式：\n（A）![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501113123953.png)即每一个变量除以该变量取值的全距，标准化后的每个变量的取值范围限于[-1,1]。\n(B) ![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501113147271.png)即每一个变量与变量最小值之差除以该变量取值的全距，标准化后各变量的取值范围限于[0,1]。 \n(C）![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501113205125.png) ，即每一个变量值除以该变量取值的最大值，标准化后使变量的最大取值为1。\n \n采用极值化方法对变量数据无量纲化是通过变量取值的最大值和最小值将原始数据转换为界于某一特定范围的数据，从而消除量纲和数量级的影响。由于极值化方法对变量无量纲化过程中仅仅对该变量的最大值和最小值这两个极端值有关，而与其他取值无关，这使得该方法在改变各变量权重时过分依赖两个极端取值。\n\n# （2）标准化方法\n利用![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501113333257.png)来计算，即每一个变量值与其平均值之差除以该变量的标准差，无量纲化后各变量的平均值为0，标准差为1，从而消除量纲和数量级的影响。虽然该方法在无量纲化过程中利用了所有的数据信息，但是该方法在无量纲化后不仅使得转换后的各变量均值相同，且标准差也相同，即无量纲化的同时还消除了各变量在变异程度上的差异。\n\n# （3）均值化方法\n计算公式为：![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501113415384.png)，该方法在消除量纲和数量级影响的同时，保留了各变量取值差异程度上的信息。\n（4）标准差化方法\n计算公式为：![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501113444104.png)。该方法是标准化方法的基础上的一种变形，两者的差别仅在无量纲化后各变量的均值上，标准化方法处理后各变量的均值为0，而标准差化方法处理后各变量均值为原始变量均值与标准差的比值。\n\n综上所述，针对不同类型的数据，可以选择相应的无量纲化方法。如下的示例就是一个典型的评价体系中无量纲化的范例。\n\n# 示例\n\n近年来我国淡水湖水质富营养化的污染日益严重，如何对湖泊水质的富营养化进行综合评价与治理是摆在我们面前的任务，下面两个表格分别为我国5个湖泊的实测数据和湖泊水质评价标准。\n\n表1  全国五个主要湖泊评价参数的实测数据\n![全国五个主要湖泊评价参数的实测数据](https://img-blog.csdnimg.cn/20200501113549269.png)\n表2  湖泊水质评价标准\n![湖泊水质评价标准](https://img-blog.csdnimg.cn/20200501113628784.png)\n## 要求\n（1）试用以上数据，分析总磷，耗氧量，透明度，总氨这4个指标对湖泊水质评价富营养化的作用。\n（2）对这5个湖泊的水质综合评价，确定水质等级。\n\n在进行综合评价之前，首先要对评价的指标进行分析。通常评价指标分成效益型，成本型和固定型指标。效益型指标是指那些数值越大影响力越大的统计指标（也称正向型指标）；成本型指标是指数值越小越好的指标（也称逆向型指标）；而固定型指标是指数值越接近于某个常数越好的指标（也称适度型指标）。如果每个评价指标的属性不一样，则在综合评价时就容易发生偏差，必须先对各评价指标统一属性。\n## 建模步骤\n（ⅰ）建立无量纲化实测数据矩阵和评价标准矩阵，其中实测数据矩阵和等级标准矩阵如下，\n![实测数据矩阵和等级标准矩阵](https://img-blog.csdnimg.cn/20200501113736824.png)\n然后建立无量纲化实测数据矩阵和无量纲化等级标准矩阵，其中\n![a和b](https://img-blog.csdnimg.cn/20200501113756112.png)\n得到\n![A](https://img-blog.csdnimg.cn/20200501114209393.png)\n\n![B](https://img-blog.csdnimg.cn/20200501114201749.png)\n\n（ⅱ）计算各评价指标的权重\n计算矩阵B的各行向量的均值和标准差，\n![均值和标准差](https://img-blog.csdnimg.cn/20200501114144147.png)\n\n然后计算变异系数![变异系数](https://img-blog.csdnimg.cn/20200501114223682.png)\n最后对变异系数归一化得到各指标的权重为\n![指标的权重](https://img-blog.csdnimg.cn/20200501114336124.png)\n（ⅲ）建立各湖泊水质的综合评价模型\n通常可以利用向量之间的距离来衡量两个向量之间的接近程度，在Matlab中，有以下的函数命令来计算向量之间的距离；\ndist(w,p): 计算中的每个行向量和中每个列向量之间的欧式距离；\nmandist(w,p): 绝对值距离。\n计算中各行向量到中各列向量之间的欧氏距离，\n![各列向量之间的欧氏距离](https://img-blog.csdnimg.cn/20200501114434381.png)\n若![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501114446171.png)，则第个湖泊属于第级。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501114457329.png)\n这说明杭州西湖，武汉东湖都属于极富营养水质，青海湖属于中营养水质，而巢湖和滇池属于富营养水质。\n\n同时也可以计算中各行向量到中各列向量之间的绝对值距离![在这里插入图片描述](https://img-blog.csdnimg.cn/202005011145144.png)\n若![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501114526659.png)，则第个湖泊属于第级。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200501114535650.png)\n其评价结果与利用欧氏距离得到的评价结果完全一样。\n\n所以，从上面的计算可以看出，尽管欧氏距离和绝对值距离的意义完全不一样，但对湖泊水质的评价等级是一样的，这表明了方法的稳定性。\n\n# 程序\n\n```powershell\nX=[130 10.3 0.35 2.76;\n105 10.7 0.4 2;\n20 1.4 4.5 0.22\n30 6.26 0.25 1.67 ;\n20 10.13 0.5 0.23];\nA1=X(:,1)./130;\nA2=X(:,2)./10.7;\nA3=0.25./X(:,3);\nA4=X(:,4)./2.76;\nA=[A1 A2 A3 A4];\n\nY=[1 4 23 100 660;\n0.09 0.36 1.8 7.1 27.1;\n37 12 2.4 0.55 0.17;\n0.02 0.06 0.31 1.2 4.6];\nB1=Y(1,:)./660;\nB2=Y(2,:)./27.1;\nB3=0.17./Y(3,:);\nB4=Y(4,:)./4.6;\nB=[B1;B2;B3;B4];\n\n% dist是一个欧式距离加权函数，给一个输入使用权值，去获得加权的输入\n% dist(W,P)中：W——S×R的权值矩阵；P——R×Q的矩阵，表示Q个输入（列）向量\n% dist(w,p): 计算中的每个行向量和中每个列向量之间的欧式距离；\njd=dist(A,B);\njd\n% mandist(w,p): 绝对值距离\nmjd=mandist(A,B);\nmjd\n```\n# 结果\n![运行结果](https://img-blog.csdnimg.cn/20200501161822708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70)\n\n# 备注\n**各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！** \n\n**各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！**\n\n**各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！** ","slug":"Dimensionless-processing-of-data","published":1,"updated":"2020-12-01T07:18:27.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki8tmm690013v8vbd9ga8i4u","content":"<p>在对实际问题建模过程中，特别是在建立指标评价体系时，常常会面临不同类型的数据处理及融合。而各个指标之间由于计量单位和数量级的不尽相同，从而使得各指标间不具有可比性。在数据分析之前，通常需要先将数据标准化，利用标准化后的数据进行分析。数据标准化处理主要包括同趋化处理和无量纲化处理两个方面。数据的同趋化处理主要解决不同性质的数据问题，对不同性质指标直接累加不能正确反应不同作用力的综合结果，须先考虑改变逆指标数据性质，使所有指标对评价体系的作用力同趋化。数据无量纲化主要解决数据的不可比性，在此处主要介绍几种数据的无量纲化的处理方式。</p>\n<h1 id=\"（1）极值化方法\"><a href=\"#（1）极值化方法\" class=\"headerlink\" title=\"（1）极值化方法\"></a>（1）极值化方法</h1><p>可以选择如下的三种方式：<br>（A）<img src=\"https://img-blog.csdnimg.cn/20200501113123953.png\" alt=\"在这里插入图片描述\">即每一个变量除以该变量取值的全距，标准化后的每个变量的取值范围限于[-1,1]。<br>(B) <img src=\"https://img-blog.csdnimg.cn/20200501113147271.png\" alt=\"在这里插入图片描述\">即每一个变量与变量最小值之差除以该变量取值的全距，标准化后各变量的取值范围限于[0,1]。<br>(C）<img src=\"https://img-blog.csdnimg.cn/20200501113205125.png\" alt=\"在这里插入图片描述\"> ，即每一个变量值除以该变量取值的最大值，标准化后使变量的最大取值为1。</p>\n<p>采用极值化方法对变量数据无量纲化是通过变量取值的最大值和最小值将原始数据转换为界于某一特定范围的数据，从而消除量纲和数量级的影响。由于极值化方法对变量无量纲化过程中仅仅对该变量的最大值和最小值这两个极端值有关，而与其他取值无关，这使得该方法在改变各变量权重时过分依赖两个极端取值。</p>\n<h1 id=\"（2）标准化方法\"><a href=\"#（2）标准化方法\" class=\"headerlink\" title=\"（2）标准化方法\"></a>（2）标准化方法</h1><p>利用<img src=\"https://img-blog.csdnimg.cn/20200501113333257.png\" alt=\"在这里插入图片描述\">来计算，即每一个变量值与其平均值之差除以该变量的标准差，无量纲化后各变量的平均值为0，标准差为1，从而消除量纲和数量级的影响。虽然该方法在无量纲化过程中利用了所有的数据信息，但是该方法在无量纲化后不仅使得转换后的各变量均值相同，且标准差也相同，即无量纲化的同时还消除了各变量在变异程度上的差异。</p>\n<h1 id=\"（3）均值化方法\"><a href=\"#（3）均值化方法\" class=\"headerlink\" title=\"（3）均值化方法\"></a>（3）均值化方法</h1><p>计算公式为：<img src=\"https://img-blog.csdnimg.cn/20200501113415384.png\" alt=\"在这里插入图片描述\">，该方法在消除量纲和数量级影响的同时，保留了各变量取值差异程度上的信息。<br>（4）标准差化方法<br>计算公式为：<img src=\"https://img-blog.csdnimg.cn/20200501113444104.png\" alt=\"在这里插入图片描述\">。该方法是标准化方法的基础上的一种变形，两者的差别仅在无量纲化后各变量的均值上，标准化方法处理后各变量的均值为0，而标准差化方法处理后各变量均值为原始变量均值与标准差的比值。</p>\n<p>综上所述，针对不同类型的数据，可以选择相应的无量纲化方法。如下的示例就是一个典型的评价体系中无量纲化的范例。</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>近年来我国淡水湖水质富营养化的污染日益严重，如何对湖泊水质的富营养化进行综合评价与治理是摆在我们面前的任务，下面两个表格分别为我国5个湖泊的实测数据和湖泊水质评价标准。</p>\n<p>表1  全国五个主要湖泊评价参数的实测数据<br><img src=\"https://img-blog.csdnimg.cn/20200501113549269.png\" alt=\"全国五个主要湖泊评价参数的实测数据\"><br>表2  湖泊水质评价标准<br><img src=\"https://img-blog.csdnimg.cn/20200501113628784.png\" alt=\"湖泊水质评价标准\"></p>\n<h2 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h2><p>（1）试用以上数据，分析总磷，耗氧量，透明度，总氨这4个指标对湖泊水质评价富营养化的作用。<br>（2）对这5个湖泊的水质综合评价，确定水质等级。</p>\n<p>在进行综合评价之前，首先要对评价的指标进行分析。通常评价指标分成效益型，成本型和固定型指标。效益型指标是指那些数值越大影响力越大的统计指标（也称正向型指标）；成本型指标是指数值越小越好的指标（也称逆向型指标）；而固定型指标是指数值越接近于某个常数越好的指标（也称适度型指标）。如果每个评价指标的属性不一样，则在综合评价时就容易发生偏差，必须先对各评价指标统一属性。</p>\n<h2 id=\"建模步骤\"><a href=\"#建模步骤\" class=\"headerlink\" title=\"建模步骤\"></a>建模步骤</h2><p>（ⅰ）建立无量纲化实测数据矩阵和评价标准矩阵，其中实测数据矩阵和等级标准矩阵如下，<br><img src=\"https://img-blog.csdnimg.cn/20200501113736824.png\" alt=\"实测数据矩阵和等级标准矩阵\"><br>然后建立无量纲化实测数据矩阵和无量纲化等级标准矩阵，其中<br><img src=\"https://img-blog.csdnimg.cn/20200501113756112.png\" alt=\"a和b\"><br>得到<br><img src=\"https://img-blog.csdnimg.cn/20200501114209393.png\" alt=\"A\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200501114201749.png\" alt=\"B\"></p>\n<p>（ⅱ）计算各评价指标的权重<br>计算矩阵B的各行向量的均值和标准差，<br><img src=\"https://img-blog.csdnimg.cn/20200501114144147.png\" alt=\"均值和标准差\"></p>\n<p>然后计算变异系数<img src=\"https://img-blog.csdnimg.cn/20200501114223682.png\" alt=\"变异系数\"><br>最后对变异系数归一化得到各指标的权重为<br><img src=\"https://img-blog.csdnimg.cn/20200501114336124.png\" alt=\"指标的权重\"><br>（ⅲ）建立各湖泊水质的综合评价模型<br>通常可以利用向量之间的距离来衡量两个向量之间的接近程度，在Matlab中，有以下的函数命令来计算向量之间的距离；<br>dist(w,p): 计算中的每个行向量和中每个列向量之间的欧式距离；<br>mandist(w,p): 绝对值距离。<br>计算中各行向量到中各列向量之间的欧氏距离，<br><img src=\"https://img-blog.csdnimg.cn/20200501114434381.png\" alt=\"各列向量之间的欧氏距离\"><br>若<img src=\"https://img-blog.csdnimg.cn/20200501114446171.png\" alt=\"在这里插入图片描述\">，则第个湖泊属于第级。<br><img src=\"https://img-blog.csdnimg.cn/20200501114457329.png\" alt=\"在这里插入图片描述\"><br>这说明杭州西湖，武汉东湖都属于极富营养水质，青海湖属于中营养水质，而巢湖和滇池属于富营养水质。</p>\n<p>同时也可以计算中各行向量到中各列向量之间的绝对值距离<img src=\"https://img-blog.csdnimg.cn/202005011145144.png\" alt=\"在这里插入图片描述\"><br>若<img src=\"https://img-blog.csdnimg.cn/20200501114526659.png\" alt=\"在这里插入图片描述\">，则第个湖泊属于第级。<br><img src=\"https://img-blog.csdnimg.cn/20200501114535650.png\" alt=\"在这里插入图片描述\"><br>其评价结果与利用欧氏距离得到的评价结果完全一样。</p>\n<p>所以，从上面的计算可以看出，尽管欧氏距离和绝对值距离的意义完全不一样，但对湖泊水质的评价等级是一样的，这表明了方法的稳定性。</p>\n<h1 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h1><pre class=\"line-numbers language-powershell\"><code class=\"language-powershell\">X=<span class=\"token punctuation\">[</span>130 10<span class=\"token punctuation\">.</span>3 0<span class=\"token punctuation\">.</span>35 2<span class=\"token punctuation\">.</span>76<span class=\"token punctuation\">;</span>\n105 10<span class=\"token punctuation\">.</span>7 0<span class=\"token punctuation\">.</span>4 2<span class=\"token punctuation\">;</span>\n20 1<span class=\"token punctuation\">.</span>4 4<span class=\"token punctuation\">.</span>5 0<span class=\"token punctuation\">.</span>22\n30 6<span class=\"token punctuation\">.</span>26 0<span class=\"token punctuation\">.</span>25 1<span class=\"token punctuation\">.</span>67 <span class=\"token punctuation\">;</span>\n20 10<span class=\"token punctuation\">.</span>13 0<span class=\"token punctuation\">.</span>5 0<span class=\"token punctuation\">.</span>23<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nA1=X<span class=\"token punctuation\">(</span>:<span class=\"token punctuation\">,</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>130<span class=\"token punctuation\">;</span>\nA2=X<span class=\"token punctuation\">(</span>:<span class=\"token punctuation\">,</span>2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>10<span class=\"token punctuation\">.</span>7<span class=\"token punctuation\">;</span>\nA3=0<span class=\"token punctuation\">.</span>25<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>X<span class=\"token punctuation\">(</span>:<span class=\"token punctuation\">,</span>3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nA4=X<span class=\"token punctuation\">(</span>:<span class=\"token punctuation\">,</span>4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>2<span class=\"token punctuation\">.</span>76<span class=\"token punctuation\">;</span>\nA=<span class=\"token namespace\">[A1 A2 A3 A4]</span><span class=\"token punctuation\">;</span>\n\nY=<span class=\"token punctuation\">[</span>1 4 23 100 660<span class=\"token punctuation\">;</span>\n0<span class=\"token punctuation\">.</span>09 0<span class=\"token punctuation\">.</span>36 1<span class=\"token punctuation\">.</span>8 7<span class=\"token punctuation\">.</span>1 27<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">;</span>\n37 12 2<span class=\"token punctuation\">.</span>4 0<span class=\"token punctuation\">.</span>55 0<span class=\"token punctuation\">.</span>17<span class=\"token punctuation\">;</span>\n0<span class=\"token punctuation\">.</span>02 0<span class=\"token punctuation\">.</span>06 0<span class=\"token punctuation\">.</span>31 1<span class=\"token punctuation\">.</span>2 4<span class=\"token punctuation\">.</span>6<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nB1=Y<span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">,</span>:<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>660<span class=\"token punctuation\">;</span>\nB2=Y<span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">,</span>:<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>27<span class=\"token punctuation\">.</span>1<span class=\"token punctuation\">;</span>\nB3=0<span class=\"token punctuation\">.</span>17<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>Y<span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">,</span>:<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nB4=Y<span class=\"token punctuation\">(</span>4<span class=\"token punctuation\">,</span>:<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>4<span class=\"token punctuation\">.</span>6<span class=\"token punctuation\">;</span>\nB=<span class=\"token namespace\">[B1;B2;B3;B4]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">%</span> dist是一个欧式距离加权函数，给一个输入使用权值，去获得加权的输入\n<span class=\"token operator\">%</span> dist<span class=\"token punctuation\">(</span>W<span class=\"token punctuation\">,</span>P<span class=\"token punctuation\">)</span>中：W——S×R的权值矩阵；P——R×Q的矩阵，表示Q个输入（列）向量\n<span class=\"token operator\">%</span> dist<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span>: 计算中的每个行向量和中每个列向量之间的欧式距离；\njd=dist<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njd\n<span class=\"token operator\">%</span> mandist<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span>: 绝对值距离\nmjd=mandist<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmjd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h1><p><img src=\"https://img-blog.csdnimg.cn/20200501161822708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70\" alt=\"运行结果\"></p>\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><p><strong>各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！</strong> </p>\n<p><strong>各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！</strong></p>\n<p><strong>各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！</strong> </p>\n","site":{"data":{"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<p>在对实际问题建模过程中，特别是在建立指标评价体系时，常常会面临不同类型的数据处理及融合。而各个指标之间由于计量单位和数量级的不尽相同，从而使得各指标间不具有可比性。在数据分析之前，通常需要先将数据标准化，利用标准化后的数据进行分析。数据标准化处理主要包括同趋化处理和无量纲化处理两个方面。数据的同趋化处理主要解决不同性质的数据问题，对不同性质指标直接累加不能正确反应不同作用力的综合结果，须先考虑改变逆指标数据性质，使所有指标对评价体系的作用力同趋化。数据无量纲化主要解决数据的不可比性，在此处主要介绍几种数据的无量纲化的处理方式。</p>\n<h1 id=\"（1）极值化方法\"><a href=\"#（1）极值化方法\" class=\"headerlink\" title=\"（1）极值化方法\"></a>（1）极值化方法</h1><p>可以选择如下的三种方式：<br>（A）<img src=\"https://img-blog.csdnimg.cn/20200501113123953.png\" alt=\"在这里插入图片描述\">即每一个变量除以该变量取值的全距，标准化后的每个变量的取值范围限于[-1,1]。<br>(B) <img src=\"https://img-blog.csdnimg.cn/20200501113147271.png\" alt=\"在这里插入图片描述\">即每一个变量与变量最小值之差除以该变量取值的全距，标准化后各变量的取值范围限于[0,1]。<br>(C）<img src=\"https://img-blog.csdnimg.cn/20200501113205125.png\" alt=\"在这里插入图片描述\"> ，即每一个变量值除以该变量取值的最大值，标准化后使变量的最大取值为1。</p>\n<p>采用极值化方法对变量数据无量纲化是通过变量取值的最大值和最小值将原始数据转换为界于某一特定范围的数据，从而消除量纲和数量级的影响。由于极值化方法对变量无量纲化过程中仅仅对该变量的最大值和最小值这两个极端值有关，而与其他取值无关，这使得该方法在改变各变量权重时过分依赖两个极端取值。</p>\n<h1 id=\"（2）标准化方法\"><a href=\"#（2）标准化方法\" class=\"headerlink\" title=\"（2）标准化方法\"></a>（2）标准化方法</h1><p>利用<img src=\"https://img-blog.csdnimg.cn/20200501113333257.png\" alt=\"在这里插入图片描述\">来计算，即每一个变量值与其平均值之差除以该变量的标准差，无量纲化后各变量的平均值为0，标准差为1，从而消除量纲和数量级的影响。虽然该方法在无量纲化过程中利用了所有的数据信息，但是该方法在无量纲化后不仅使得转换后的各变量均值相同，且标准差也相同，即无量纲化的同时还消除了各变量在变异程度上的差异。</p>\n<h1 id=\"（3）均值化方法\"><a href=\"#（3）均值化方法\" class=\"headerlink\" title=\"（3）均值化方法\"></a>（3）均值化方法</h1><p>计算公式为：<img src=\"https://img-blog.csdnimg.cn/20200501113415384.png\" alt=\"在这里插入图片描述\">，该方法在消除量纲和数量级影响的同时，保留了各变量取值差异程度上的信息。<br>（4）标准差化方法<br>计算公式为：<img src=\"https://img-blog.csdnimg.cn/20200501113444104.png\" alt=\"在这里插入图片描述\">。该方法是标准化方法的基础上的一种变形，两者的差别仅在无量纲化后各变量的均值上，标准化方法处理后各变量的均值为0，而标准差化方法处理后各变量均值为原始变量均值与标准差的比值。</p>\n<p>综上所述，针对不同类型的数据，可以选择相应的无量纲化方法。如下的示例就是一个典型的评价体系中无量纲化的范例。</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>近年来我国淡水湖水质富营养化的污染日益严重，如何对湖泊水质的富营养化进行综合评价与治理是摆在我们面前的任务，下面两个表格分别为我国5个湖泊的实测数据和湖泊水质评价标准。</p>\n<p>表1  全国五个主要湖泊评价参数的实测数据<br><img src=\"https://img-blog.csdnimg.cn/20200501113549269.png\" alt=\"全国五个主要湖泊评价参数的实测数据\"><br>表2  湖泊水质评价标准<br><img src=\"https://img-blog.csdnimg.cn/20200501113628784.png\" alt=\"湖泊水质评价标准\"></p>\n<h2 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h2><p>（1）试用以上数据，分析总磷，耗氧量，透明度，总氨这4个指标对湖泊水质评价富营养化的作用。<br>（2）对这5个湖泊的水质综合评价，确定水质等级。</p>\n<p>在进行综合评价之前，首先要对评价的指标进行分析。通常评价指标分成效益型，成本型和固定型指标。效益型指标是指那些数值越大影响力越大的统计指标（也称正向型指标）；成本型指标是指数值越小越好的指标（也称逆向型指标）；而固定型指标是指数值越接近于某个常数越好的指标（也称适度型指标）。如果每个评价指标的属性不一样，则在综合评价时就容易发生偏差，必须先对各评价指标统一属性。</p>\n<h2 id=\"建模步骤\"><a href=\"#建模步骤\" class=\"headerlink\" title=\"建模步骤\"></a>建模步骤</h2><p>（ⅰ）建立无量纲化实测数据矩阵和评价标准矩阵，其中实测数据矩阵和等级标准矩阵如下，<br><img src=\"https://img-blog.csdnimg.cn/20200501113736824.png\" alt=\"实测数据矩阵和等级标准矩阵\"><br>然后建立无量纲化实测数据矩阵和无量纲化等级标准矩阵，其中<br><img src=\"https://img-blog.csdnimg.cn/20200501113756112.png\" alt=\"a和b\"><br>得到<br><img src=\"https://img-blog.csdnimg.cn/20200501114209393.png\" alt=\"A\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200501114201749.png\" alt=\"B\"></p>\n<p>（ⅱ）计算各评价指标的权重<br>计算矩阵B的各行向量的均值和标准差，<br><img src=\"https://img-blog.csdnimg.cn/20200501114144147.png\" alt=\"均值和标准差\"></p>\n<p>然后计算变异系数<img src=\"https://img-blog.csdnimg.cn/20200501114223682.png\" alt=\"变异系数\"><br>最后对变异系数归一化得到各指标的权重为<br><img src=\"https://img-blog.csdnimg.cn/20200501114336124.png\" alt=\"指标的权重\"><br>（ⅲ）建立各湖泊水质的综合评价模型<br>通常可以利用向量之间的距离来衡量两个向量之间的接近程度，在Matlab中，有以下的函数命令来计算向量之间的距离；<br>dist(w,p): 计算中的每个行向量和中每个列向量之间的欧式距离；<br>mandist(w,p): 绝对值距离。<br>计算中各行向量到中各列向量之间的欧氏距离，<br><img src=\"https://img-blog.csdnimg.cn/20200501114434381.png\" alt=\"各列向量之间的欧氏距离\"><br>若<img src=\"https://img-blog.csdnimg.cn/20200501114446171.png\" alt=\"在这里插入图片描述\">，则第个湖泊属于第级。<br><img src=\"https://img-blog.csdnimg.cn/20200501114457329.png\" alt=\"在这里插入图片描述\"><br>这说明杭州西湖，武汉东湖都属于极富营养水质，青海湖属于中营养水质，而巢湖和滇池属于富营养水质。</p>\n<p>同时也可以计算中各行向量到中各列向量之间的绝对值距离<img src=\"https://img-blog.csdnimg.cn/202005011145144.png\" alt=\"在这里插入图片描述\"><br>若<img src=\"https://img-blog.csdnimg.cn/20200501114526659.png\" alt=\"在这里插入图片描述\">，则第个湖泊属于第级。<br><img src=\"https://img-blog.csdnimg.cn/20200501114535650.png\" alt=\"在这里插入图片描述\"><br>其评价结果与利用欧氏距离得到的评价结果完全一样。</p>\n<p>所以，从上面的计算可以看出，尽管欧氏距离和绝对值距离的意义完全不一样，但对湖泊水质的评价等级是一样的，这表明了方法的稳定性。</p>\n<h1 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h1><pre><code class=\"powershell\">X=[130 10.3 0.35 2.76;\n105 10.7 0.4 2;\n20 1.4 4.5 0.22\n30 6.26 0.25 1.67 ;\n20 10.13 0.5 0.23];\nA1=X(:,1)./130;\nA2=X(:,2)./10.7;\nA3=0.25./X(:,3);\nA4=X(:,4)./2.76;\nA=[A1 A2 A3 A4];\n\nY=[1 4 23 100 660;\n0.09 0.36 1.8 7.1 27.1;\n37 12 2.4 0.55 0.17;\n0.02 0.06 0.31 1.2 4.6];\nB1=Y(1,:)./660;\nB2=Y(2,:)./27.1;\nB3=0.17./Y(3,:);\nB4=Y(4,:)./4.6;\nB=[B1;B2;B3;B4];\n\n% dist是一个欧式距离加权函数，给一个输入使用权值，去获得加权的输入\n% dist(W,P)中：W——S×R的权值矩阵；P——R×Q的矩阵，表示Q个输入（列）向量\n% dist(w,p): 计算中的每个行向量和中每个列向量之间的欧式距离；\njd=dist(A,B);\njd\n% mandist(w,p): 绝对值距离\nmjd=mandist(A,B);\nmjd</code></pre>\n<h1 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h1><p><img src=\"https://img-blog.csdnimg.cn/20200501161822708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3l3c3lkd3Nibg==,size_16,color_FFFFFF,t_70\" alt=\"运行结果\"></p>\n<h1 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h1><p><strong>各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！</strong> </p>\n<p><strong>各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！</strong></p>\n<p><strong>各位老铁养成习惯，看完点个赞呗，随便也来个关注！！！</strong> </p>\n"}],"PostAsset":[{"_id":"source/_posts/Raspberry-Pi-camera/1.png","slug":"1.png","post":"cki8tmm460003v8vbw56424k9","modified":0,"renderable":0},{"_id":"source/_posts/sort-algorithms/1.png","slug":"1.png","post":"cki8tmm4b0007v8vb4geqexd0","modified":0,"renderable":0},{"_id":"source/_posts/pip-change-source/1.png","slug":"1.png","post":"cki8tmm400001v8vbm5svdx2g","modified":0,"renderable":0},{"_id":"source/_posts/pip-change-source/2.png","slug":"2.png","post":"cki8tmm400001v8vbm5svdx2g","modified":0,"renderable":0},{"_id":"source/_posts/pip-change-source/3.png","slug":"3.png","post":"cki8tmm400001v8vbm5svdx2g","modified":0,"renderable":0},{"_id":"source/_posts/pip-change-source/4.png","slug":"4.png","post":"cki8tmm400001v8vbm5svdx2g","modified":0,"renderable":0},{"_id":"source/_posts/pip-change-source/5.png","slug":"5.png","post":"cki8tmm400001v8vbm5svdx2g","modified":0,"renderable":0},{"_id":"source/_posts/pip-change-source/6.png","slug":"6.png","post":"cki8tmm400001v8vbm5svdx2g","modified":0,"renderable":0},{"_id":"source/_posts/pip-change-source/7.png","slug":"7.png","post":"cki8tmm400001v8vbm5svdx2g","modified":0,"renderable":0},{"_id":"source/_posts/pip-change-source/8.png","slug":"8.png","post":"cki8tmm400001v8vbm5svdx2g","modified":0,"renderable":0},{"_id":"source/_posts/pip-change-source/9.png","slug":"9.png","post":"cki8tmm400001v8vbm5svdx2g","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/1.png","slug":"1.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/10.png","slug":"10.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/11.png","slug":"11.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/12.png","slug":"12.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/13.png","slug":"13.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/14.png","slug":"14.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/15.png","slug":"15.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/16.png","slug":"16.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/17.png","slug":"17.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/18.png","slug":"18.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/19.png","slug":"19.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/2.png","slug":"2.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/20.png","slug":"20.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/21.png","slug":"21.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/22.png","slug":"22.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/3.png","slug":"3.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/4.png","slug":"4.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/5.png","slug":"5.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/6.png","slug":"6.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/7.png","slug":"7.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/8.png","slug":"8.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0},{"_id":"source/_posts/Dimensionless-processing-of-data/9.png","slug":"9.png","post":"cki8tmm690013v8vbd9ga8i4u","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cki8tmm400001v8vbm5svdx2g","category_id":"cki8tmm490005v8vbdsiq2kzq","_id":"cki8tmm5k000gv8vbnzkaolds"},{"post_id":"cki8tmm460003v8vbw56424k9","category_id":"cki8tmm490005v8vbdsiq2kzq","_id":"cki8tmm5l000jv8vbq05wx9gv"},{"post_id":"cki8tmm4b0007v8vb4geqexd0","category_id":"cki8tmm5j000fv8vbz9nya1so","_id":"cki8tmm5n000nv8vbasnbm7bp"},{"post_id":"cki8tmm4h0009v8vb6lx22sbm","category_id":"cki8tmm5m000lv8vb92ttq8q9","_id":"cki8tmm5n000pv8vbyjkyah9r"},{"post_id":"cki8tmm690013v8vbd9ga8i4u","category_id":"cki8tmm6b0014v8vbuu7qklt2","_id":"cki8tmm6d0018v8vbeyx0x7dp"}],"PostTag":[{"post_id":"cki8tmm400001v8vbm5svdx2g","tag_id":"cki8tmm4b0006v8vboyke8yrz","_id":"cki8tmm5l000iv8vbgep47j7t"},{"post_id":"cki8tmm400001v8vbm5svdx2g","tag_id":"cki8tmm4j000cv8vbvxmmdgpo","_id":"cki8tmm5m000kv8vbwj3iyfn4"},{"post_id":"cki8tmm460003v8vbw56424k9","tag_id":"cki8tmm4b0006v8vboyke8yrz","_id":"cki8tmm5o000rv8vbadvds950"},{"post_id":"cki8tmm460003v8vbw56424k9","tag_id":"cki8tmm5m000mv8vbsd1118om","_id":"cki8tmm5o000sv8vbvo8dvrpm"},{"post_id":"cki8tmm460003v8vbw56424k9","tag_id":"cki8tmm5n000ov8vbkuidblvj","_id":"cki8tmm5p000uv8vbd0dsqghe"},{"post_id":"cki8tmm4b0007v8vb4geqexd0","tag_id":"cki8tmm5n000qv8vbovukmvlu","_id":"cki8tmm5p000wv8vblebha01q"},{"post_id":"cki8tmm4b0007v8vb4geqexd0","tag_id":"cki8tmm5o000tv8vbcchbl58m","_id":"cki8tmm5p000xv8vbdbvz1o0l"},{"post_id":"cki8tmm4h0009v8vb6lx22sbm","tag_id":"cki8tmm5p000vv8vbwgmnvhrr","_id":"cki8tmm5r0010v8vbm80xw8o6"},{"post_id":"cki8tmm4h0009v8vb6lx22sbm","tag_id":"cki8tmm5q000yv8vbwoef834f","_id":"cki8tmm5r0011v8vb9w9wk77j"},{"post_id":"cki8tmm4h0009v8vb6lx22sbm","tag_id":"cki8tmm5q000zv8vbbmw4sifa","_id":"cki8tmm5r0012v8vbvg6gqd0d"},{"post_id":"cki8tmm690013v8vbd9ga8i4u","tag_id":"cki8tmm6b0015v8vbl2wl8mg1","_id":"cki8tmm6c0016v8vbs86m2z6s"},{"post_id":"cki8tmm690013v8vbd9ga8i4u","tag_id":"cki8tmm5q000yv8vbwoef834f","_id":"cki8tmm6d0017v8vb23n9egl6"}],"Tag":[{"name":"python","_id":"cki8tmm4b0006v8vboyke8yrz"},{"name":"pip","_id":"cki8tmm4j000cv8vbvxmmdgpo"},{"name":"Raspberry Pi","_id":"cki8tmm5m000mv8vbsd1118om"},{"name":"网络","_id":"cki8tmm5n000ov8vbkuidblvj"},{"name":"leetcode","_id":"cki8tmm5n000qv8vbovukmvlu"},{"name":"算法","_id":"cki8tmm5o000tv8vbcchbl58m"},{"name":"Logistic加密","_id":"cki8tmm5p000vv8vbwgmnvhrr"},{"name":"matlab","_id":"cki8tmm5q000yv8vbwoef834f"},{"name":"数字图像处理","_id":"cki8tmm5q000zv8vbbmw4sifa"},{"name":"数学分析模型","_id":"cki8tmm6b0015v8vbl2wl8mg1"}]}}